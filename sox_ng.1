'\" t
'\" The line above instructs most `man' programs to invoke tbl
'\"
'\" Separate paragraphs; not the same as PP which resets indent level.
.de SP
.if t .sp .5
.if n .sp
..
'\"
'\" Replacement em dash for nroff (default is too short).
.ie n .ds m " - 
.el .ds m \(em
'\"
'\" Placeholder macro for if longer nroff arrow is needed.
.ds RA \(->
'\"
'\" Decimal point set slightly raised
.if t .ds d \v'-.15m'.\v'+.15m'
.if n .ds d .
'\"
'\" Enclosure macro for examples
.de XE
.SP
.nf
.ft CW
..
.de XX
.ft R
.SP
.fi
..
.TH SoX 1 "December 05, 2024" "sox_ng" "Sound eXchange_ng"
.SH NAME
SoX \- Sound eXchange_ng, another Swiss Army knife of audio manipulation
.SH SYNOPSIS
.nf
\fBsox_ng\fR [\fIglobal-options\fR] [\fIformat-options\fR] \fIinfile1\fR
	[[\fIformat-options\fR] \fIinfile2\fR] ... [\fIformat-options\fR] \fIoutfile\fR
	[\fIeffect\fR [\fIeffect-options\fR]] ...
.SP
\fBplay_ng\fR [\fIglobal-options\fR] [\fIformat-options\fR] \fIinfile1\fR
	[[\fIformat-options\fR] \fIinfile2\fR] ... [\fIformat-options\fR]
	[\fIeffect\fR [\fIeffect-options\fR]] ...
.SP
\fBrec_ng\fR [\fIglobal-options\fR] [\fIformat-options\fR] \fIoutfile\fR
	[\fIeffect\fR [\fIeffect-options\fR]] ...
.fi
.SH DESCRIPTION
.SS Introduction
SoX reads and writes audio files in most popular formats and can
optionally apply effects to them. It can combine multiple input
sources, synthesize audio and, on many systems, act as a general
purpose audio player or as a multitrack audio recorder.
It can also split the input into multiple output files.
.SP
All SoX functionality is available using just the \fBsox_ng\fR command.
To simplify playing and recording audio, if SoX is invoked as
\fBplay_ng\fR, the output file is automatically set to be the default sound
device and, if invoked as \fBrec_ng\fR, the default sound device is used as an
input source.
Additionally, the \fBsoxi_ng\fR
command provides a convenient way to query audio file header information.
.SP
The heart of SoX is a library called \fBlibsox_ng\fR.  Those interested in
extending SoX or using it in other programs should refer to the \fBlibsox_ng\fR
manual page.
.SP
SoX is a command-line audio processing tool particularly suited to making
quick, simple edits and to batch processing.
If you need an interactive, graphical audio editor, use
.BR audacity (1).
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
The overall SoX processing chain can be summarized as follows:
.TS
center;
l.
Input(s) \*(RA Combiner \*(RA Effects \*(RA Output(s)
.TE
.DT
.SP
On the SoX command line, the positions of the
Output(s) and the Effects are swapped w.r.t. the logical flow just
shown and, while options pertaining to files are placed
before their respective file names, the opposite is true for effects.
To show how this works in practice, here is a selection of examples of
how SoX might be used.  The simple
.XE
   sox_ng recital.au recital.wav
.XX
translates an audio file in Sun AU format to a Microsoft WAV file, while
.XE
   sox_ng recital.au \-b 16 recital.wav channels 1 rate 16k fade 3 norm
.XX
performs the same format translation but also applies four effects
(down-mix to one channel, sample rate change, fade in and normalize)
and stores the result at a bit-depth of 16.
.XE
   sox_ng \-r 16k \-e signed \-b 8 \-c 1 voice-memo.raw voice-memo.wav
.XX
converts `raw' (a.k.a. `headerless') audio to a self-describing file format,
.XE
   sox_ng slow.aiff fixed.aiff speed 1.027
.XX
adjusts audio speed,
.XE
   sox_ng short.wav long.wav longer.wav
.XX
concatenates two audio files and
.XE
   sox_ng \-m music.mp3 voice.wav mixed.flac
.XX
mixes together two audio files.
.XE
   play_ng \(dqThe Moonbeams/Greatest/*.ogg\(dq bass +3
.XX
plays a collection of audio files applying a bass boosting effect,
.XE
   play_ng \-n \-c1 synth sin %\-12 sin %\-9 sin %\-5 sin %\-2 fade h 0.1 1 0.1
.XX
plays a synthesized `A minor seventh' chord with a pipe organ sound,
.XE
   rec_ng \-c 2 radio.aiff trim 0 30:00
.XX
records half an hour of stereo audio and
.XE
   play_ng \-q take1.aiff & rec \-M take1.aiff take1\-dub.aiff
.XX
(with a POSIX shell and where supported by hardware)
records a new track in a multitrack recording.  Finally,
.XE
.ne 3
   rec_ng \-r 44100 \-b 16 \-e signed-integer \-p \\
	silence 1 0.50 0.1% 1 10:00 0.1% | \\
	sox_ng \-p song.ogg silence 1 0.50 0.1% 1 2.0 0.1% : \\
	newfile : restart
.XX
records a stream of audio such as an LP or cassette and splits it into multiple
audio files at points where there are two seconds of silence.
Also, it does not start
recording until it detects some sound and stops after it sees
ten minutes of silence.
.SP
The above is just an overview of SoX's capabilities. Detailed
explanations of how to use all SoX parameters, file formats and
effects can be found below in this manual, in
.BR soxformat_ng (7)
and in
.BR soxi_ng (1).
.SS File Format Types
SoX can work with `self-describing' and `raw' audio files.
`Self-describing' formats (e.g. WAV, FLAC, MP3) have a header that
completely describes the signal and encoding attributes of the audio
data that follows. `raw' or `headerless' formats do not contain this
information, so the audio characteristics of these must be described
on the SoX command line, except for a few which can be inferred
from the filename extension
such as \fB.gsm\fR, always \fB\-c1\ \-r8000 \-e gsm\fR,
and named raw formats like \fB.f32\fR, \fR.s16\fR and \fR.ul\fR
which give the encoding but not the sample rate or number of channels.
.SP
The following four characteristics are used to describe the format of
audio data:
.TP
sample rate
The sample rate in samples per second (`Hertz' or `Hz').
Digital telephony traditionally uses a sample rate of 8000Hz (8kHz)
though 16 and even 32kHz are becoming more common. Audio
Compact Discs use 44100Hz (44\*d1kHz), Digital Audio Tape and many
computer systems use 48kHz and professional audio systems often use
96kHz.
.TP
sample size
The number of bits used to store each sample.  Today, 16-bit is
commonly used, 8-bit was popular in the early days of computer
audio and 24-bit is used in the professional audio arena.
.TP
data encoding
The way in which each audio sample is represented (or `encoded').  Some
encodings have variants with different byte-orderings or bit-orderings,
some compress the audio data so that it takes up less disk space or
transmission bandwidth than uncompressed formats.
Commonly-used
encoding types include floating point, \(*m-law, ADPCM, signed-integer
PCM, MP3 and FLAC.
.TP
channels
The number of audio channels contained in the file.  One (`mono') and
two (`stereo') are widely used and `surround sound' audio typically
contains six or more channels.
.PP
The term `bit rate' is a measure of the amount of storage occupied by an
encoded audio signal per unit of time.  It can depend on all of the
above and is typically denoted as a number of kilobits per second
(kbps).  An A-law telephony signal has a bit rate of 64 kbps, MP3-encoded
stereo music typically has a bit rate of 128\-196 kbps and FLAC-encoded
stereo music typically has a bit rate of 550\-760 kbps.
.SP
Most self-describing formats also allow textual `comments' to be
embedded in the file that can be used to describe the audio in some way,
e.g. for music, the title, the author, etc.
.SP
One important use of audio file comments is to convey `Replay Gain'
information.  SoX can apply Replay Gain automatically
for formats that contain comments but does not generate it.
By default, SoX copies comments from the first input file
to output files that support comments, so output files may contain
Replay Gain information which is incorrect.
This can be fixed, when converting input files
with \fB\-\-replaygain\fR enabled, by removing all comments using
\fB\-\-comment\ \(dq\(dq\fR or removing just the REPLAYGAIN comment
with
.XE
soxi_ng -a in.au | grep -v REPLAYGAIN > comments
sox_ng --replay-gain=track in.au --comment-file comments out.au
.XX
.SP
.SS Determining and setting the File Format
SoX uses several mechanisms to determine or set the
format of an audio file.  Depending on the circumstances,
individual characteristics may be determined or set using different mechanisms.
.SP
To determine the format of an input file, SoX uses, in order of
precedence and as given or available:
.IP 1. 4
Command-line format options,
.IP 2. 4
The contents of the file header,
.IP 3. 4
The filename extension.
.PP
To set the output file format, SoX uses, in order of
precedence and as given or available:
.IP 1. 4
Command-line format options,
.IP 2. 4
The filename extension,
.IP 3. 4
The input file format characteristics or the closest
that is supported by the output file type.
.PP
For all files, SoX exits with an error
if the file type cannot be determined. Command-line format options may
need to be added or changed to resolve the problem.
.SS Playing & Recording Audio
The \fBplay_ng\fR and \fBrec_ng\fP
commands are provided so that basic playing and
recording is as simple as
.XE
   play_ng existing-file.wav
.XX
and
.XE
   rec_ng new-file.wav
.XX
These two commands are functionally equivalent to
.XE
   sox_ng existing-file.wav \-d
.XX
and
.XE
   sox_ng \-d new-file.wav
.XX
Further options and effects (as described below) can be
added to the commands in either form.
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
When playing a file with a sample rate that is not supported by the
audio output device, SoX automatically invokes the \fBrate\fR effect
to perform the necessary sample rate conversion.  For
compatibility with old hardware, the
default \fBrate\fR quality level is set to `low'. This
can be changed by explicitly specifying the \fBrate\fR
effect with a different quality level, e.g.
.XE
   play_ng ... rate \-m
.XX
or by using the \fB\-\-play\-rate\-arg\fR
option (see below).
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
On some systems, SoX allows the audio playback volume to be adjusted while
using
.BR play_ng .
Where supported, this is achieved by tapping the `\fBv\fR' & `\fBV\fR' keys during
playback. If there is a \fBsoftvol\fR effect in the chain, these keys will
adjust that instead of the hardware mixer.
.SP
To help with setting a suitable recording level, SoX includes a peak level
meter which can be invoked (before making the actual recording) as follows:
.XE
   rec_ng \-n
.XX
The recording level should be adjusted (using the system-provided mixer
program, not SoX) so that the meter is, at most, occasionally full
scale and never `in the red' (an exclamation mark is shown).
See the \fB\-S\fR (\fB\-\-show\-progress\fR) option below.
.SS Accuracy
Many file formats that compress audio discard some of the audio signal
information. Converting to such a format and
back again will not produce an exact copy of the original audio.  This
is the case for many formats used in telephony (e.g. A-law, GSM) where
low signal bandwidth is more important than high audio fidelity and for
formats used in portable music players (e.g. MP3, Ogg Vorbis) where
adequate fidelity can be retained even with the large compression ratios
that are needed to make portable players practical.
.SP
Formats that discard audio signal information are called `lossy'.
Formats that do not are called `lossless'.  The term `quality' is used as a
measure of how closely the original audio signal is reproduced when
using a lossy format.
.SP
Audio file conversion with SoX is lossless when it can be, i.e. when not
using lossy compression, when not reducing the sampling rate or number
of channels and when the number of bits used in the destination format
is not less than in the source format.  For example, converting from an 8-bit
PCM format to a 16-bit PCM format is lossless but converting from an
8-bit PCM format to (8-bit) A-law isn't.
.SP
SoX converts all audio files to an internal, uncompressed 32-bit
format before performing any audio processing. This means that
manipulating a file that is stored in a lossy format can cause further
losses in audio fidelity.  E.g. with
.XE
   sox_ng long.mp3 short.mp3 trim 10
.XX
SoX first decompresses the input MP3 file, then applies the \fBtrim\fR
effect and finally creates the output MP3 file by re-compressing the
audio with a possible reduction in fidelity above that which
occurred when the input file was created.
Hence, if what is ultimately desired is lossily compressed audio, it is
best to perform all audio processing using lossless file
formats and then convert to the lossy format only at the final stage.
Applying multiple effects with a single SoX invocation will,
in general, produce more accurate results than those produced using
multiple SoX invocations.
.SS Dithering
Dithering is a technique used to maximize the dynamic range of audio
stored at a particular bit-depth. Any distortion introduced by
quantization is decorrelated by adding a small amount of white noise
to the signal.  In most cases, SoX can determine whether the selected
processing requires dither and will add it during output formatting if
appropriate.
.SP
By default, SoX automatically adds TPDF dither
when the output bit-depth is less than 24 and any
of the following are true:
.IP \(bu 4
bit-depth reduction has been specified explicitly using a command-line
option
.IP \(bu 4
the output file format supports only bit-depths lower than that of the
input file format
.IP \(bu 4
an effect has increased the effective bit-depth within the internal
processing chain
.PP
For example, adjusting the volume with
.B vol 0.25
requires two additional bits in which to losslessly store its results
(since 0\*d25 decimal equals 0\*d01 binary) so, if the input file
bit-depth is 16, SoX's internal representation will use 18
bits after processing this volume change.  In order to store the
output at the same depth as the input, dithering is used to remove the
additional bits.
.SP
Use the
.B \-V
option to see what processing SoX has automatically added. The
.B \-D
(\fB\-\-no\-dither\fR)
option may be given to override automatic dithering.  To invoke
dithering manually (e.g. to select a noise-shaping curve) use the
.B dither
effect.
.SS Clipping
Clipping is distortion that occurs when an audio signal level (or
`volume') exceeds the range of the chosen representation.  In most
cases, clipping is undesirable and so should be corrected by adjusting
the level prior to the point in the processing chain at which it
occurs.
.SP
In SoX, clipping can happen when using the
.B vol
or
.B gain
effects to increase the audio volume. Clipping can also occur with many
other effects, when converting one format to another and even when
simply playing the audio.
.SP
Playing an audio file often involves resampling and processing by
analog components and that can introduce a DC offset or
amplification, all of which can produce distortion if the audio signal
level was initially too close to the clipping point.
.SP
For these reasons, it is usual to make sure that an audio
file's signal level has some `headroom', i.e. it does not exceed a particular
level below the maximum possible level of the given representation.
Some standards bodies recommend as much as 9dB headroom, but in most cases,
3dB (\(~~ 70% linear) is enough.  Note that this wisdom
seems to have been lost in modern music production; in fact, many CDs,
MP3s, etc.  are now mastered at levels \fIabove\fR 0dBFS and the
audio is clipped as delivered.
.SP
SoX's
.B stat
and
.B stats
effects can assist in determining the signal level of an audio file. The
.B gain
or
.B vol
effect can be used to prevent clipping, e.g.
.XE
   sox_ng dull.wav bright.wav gain \-6 treble +6
.XX
guarantees that the treble boost will not clip.
.SP
If clipping occurs at any point during processing,
SoX displays a warning message to that effect.
.SP
See the global
.B \-G
(\fB\-\-guard\fR) option and the
.B gain
and
.B norm
effects.
.SS Input File Combining
SoX's input combiner can be configured with the \fB\-\-combine\fR global option
to combine multiple files using one of the
following methods: \fBconcatenate\fR, \fBsequence\fR, \fBmix\fR,
\fBmix-power\fR, \fBmerge\fR and \fBmultiply\fR, with shorthands
\fB\-m\fR for \fB\-\-combine\ mix\fP, \fB\-M\fR for \fBmerge\fR and
\fB\-T\fR for \fBmultiply\fR.
.SP
The default is \fBsequence\fR for
.BR play_ng ,
and \fBconcatenate\fR for
.BR sox_ng .
.SP
For methods other than \fBsequence\fR, multiple input files must have
the same sampling rate. If necessary, separate SoX invocations can be
used to make sampling rate adjustments prior to combining them.
and, with \fBconcatenate\fR, the input files must also have the same number of
channels.
.SP
The \fBsequence\fR combining method
is similar to \fBconcatenate\fR in that the audio from each input file is
sent serially to the output file but here, the output file may be
closed and reopened at the transition between input files.
This may be just what is needed when sending different types of
audio to an output device but is not generally useful when the output is a
normal file.
.SP
With the \fBmix\fR or \fBmix-power\fR combining methods,
the number of channels in each input file need not be the
same but SoX issues a warning if they are not and some
channels in the output file will not contain audio from every input
file.  A mixed audio file cannot be unmixed without reference to the
original input files.
.SP
If the \fBmerge\fR combining method is selected
the number of channels in each input file need not be the same
and a merged audio file comprises all channels from all the
input files and unmerging is possible using multiple
invocations of SoX with the
.B remix
effect.
For example, two mono files could be merged to form one stereo file and the
first and second mono files would become the left and right channels of
the stereo file.
.SP
The \fBmultiply\fR combining method multiplies the sample values of
corresponding channels treated as numbers in the interval \-1 to +1.
If the number of channels in the input files is not the same, the
missing channels will contain silence.
.SP
When combining input files, SoX applies any specified effects
(including, for example, the
.B vol
volume adjustment effect) after the audio has been combined. However, it
is often useful to be able to set the volume of the
inputs individually (i.e. `balance' them) before combining takes place.
For all combining methods, input
file volume adjustments can be made manually using the
.B \-v
option, which can be given for one or more input files. If it is
given for only some of the input files, the others receive no volume
adjustment.  In some circumstances, automatic volume
adjustments may be applied.
The global \fB\-V\fR option can be used to show the input file volume
adjustments that have been selected manually or automatically.
.SP
Some special considerations need to made when mixing input files:
.SP
Unlike the other methods, \fBmix\fR combining can
cause clipping in the combiner if no balancing is
performed.  In this case, if manual volume adjustments are not given,
SoX tries to ensure that clipping does not occur by automatically
adjusting the
volume (amplitude) of each input signal by a factor of \(S1/\s-2n\s+2,
where n is the number of input files.  If this results in audio that is
too quiet or otherwise unbalanced, the input file volumes can be
set manually with \fB\-v\fR. Using the
.B norm
effect on the mix is another alternative.
.SP
If mixed audio seems loud enough at some points but
too quiet in others, dynamic range compression can be applied to
correct this\*msee the
.B compand
effect.
.SP
With the \fBmix-power\fP combine method, the
mixed volume is approximately equal to that of one of the input signals.
This is achieved by balancing using a factor of
\(S1/\s-2\(srn\s+2 instead of \(S1/\s-2n\s+2.
Note that this balancing factor does not guarantee that clipping will not occur
but the number of clips will usually be low and the resulting
distortion is usually imperceptible.
.SS Output Files
SoX's default behaviour is to take one or more input files and
write them to a single output file.
.SP
This behaviour can be changed by placing the \fBnewfile\fR pseudo-effect
within the effects list and SoX will enter multiple output mode.
.SP
In multiple output mode, a new file is created when the effects
prior to the \fBnewfile\fR indicate that they are done.
The effects chain listed after \fBnewfile\fR
is then started up and its output is saved to the new file.
.SP
In multiple output mode, a unique number is appended automatically
to all filenames and, if the filename has an extension,
the number is inserted before the extension.  This behaviour can
be customized by placing \fB%n\fR in the filename where the
number should be substituted.  An optional number can be placed after
the \fB%\fR to indicate a minimum width for the number with leading zeroes.
\fB%n\fR defaults to two digits or, if no \fB%n\fR is included,
to three digits before the filename extension.
.SP
Multiple output mode is not very useful unless an effect that
stops the effects chain is
specified before \fBnewfile\fR. If the end of the file is
reached before the effects chain stops, no new file
is created as it would be empty.
.SP
The following is an example of splitting the first 60 seconds of an input
file into two 30 second files and ignoring the rest.
.XE
   sox_ng song.wav ringtone%1n.wav trim 0 30 : newfile : trim 0 30
.XX
.SS Stopping SoX
Usually, SoX completes its processing and exits automatically once
it has read all audio data from the input files.
.SP
It can also be terminated earlier by sending it an
interrupt signal, usually by pressing the
keyboard interrupt key which is normally Ctrl-C.  This is required
in some circumstances such as when using SoX to make a recording.
When SoX is playing multiple files, Ctrl-C behaves slightly
differently: pressing it once skips to the next file;
pressing it twice in quick succession causes SoX to exit.
.SP
Another way to stop processing early is to use an effect that
has a time period or sample count;
the \fBtrim\fR effect is an example of this.
Once all effects chains have stopped, SoX stops.
.SH FILENAMES
Filenames can be simple file names, relative or absolute path names,
URLs (for input files only) or special filenames.
URL support requires one of the
\fBwget\fR, \fBwget2\fR or \fBcurl\fR programs to be installed.
.SP
Giving SoX an input or output filename that is the same as the name
of a SoX effect does not work since SoX will treat it as an effect
specification.  You can work around this by calling the file
\fB./chorus\fR on Unix or \fB.\echorus\fR on MS/DOS but it is
not usually a problem since most audio
filenames have a filename extension after a dot, which effect names do not.
.SP
Using the same file name as an input and an output is unlikely to
work as intended because it is likely to truncate the file
before reading all of it.
.SS Special Filenames
The following filenames may be used in certain circumstances
in place of a normal filename:
.TP
\fB\-\fR
SoX can be used in simple pipeline operations by using the special
filename `\-' which,
if used as an input filename, causes
SoX to read audio data from the `standard input' (stdin)
and, if used as the output filename, will cause
SoX to send audio data to the `standard output' (stdout).
When using this option for the output file, and sometimes
when using it for an input file, the file type (see
.B \-t
below) must also be given.
.TP
\fB\(dq\^|\^\fIprogram \fR[\fIoptions\fR] ...\fB\(dq\fR
An initial `pipe' character specifies that the
given command's standard output (stdout) should be used as an input file.
Unlike the special filename
.BR \- ,
this can be used for several inputs to one SoX command.  For
example, if a program \f(CWgenw\fR generates a mono WAV signal on its
standard output, the following command makes a stereo file
from two generated signals:
.XE
   sox_ng \-M "|genw \-\-imd \-" "|genw \-\-thd \-" out.wav
.XX
For headerless (raw) audio and some other formats,
.B \-t
needs to be given before the input command.
.TP
\fB\(dq\fIwildcard-filename\fB\(dq\fR
Specifies that filename `globbing' (wildcard matching) should be performed
by SoX instead of by the shell if the \fIwildcard-filename\fR contains the
characters \fB*\fR, \fB?\fR or characters ranges such as \fB[A-Z]\fR.
This allows a single set of file options to be
applied to a group of files.  For example, if the current directory contains
three files, \f(CWfile1.vox\fR, \f(CWfile2.vox\fR and \f(CWfile3.vox\fR,
.XE
   play_ng \-\-rate 6k *.vox
.XX
is expanded by the shell (in most environments) to
.XE
   play_ng \-\-rate 6k file1.vox file2.vox file3.vox
.XX
which only treats the first `vox' file as having a sample rate of 6k.
With
.XE
   play_ng \-\-rate 6k "*.vox"
.XX
the given sample rate option is applied to all the files.
.SP
If you do not want SoX to glob the filenames, you can use the option
.B \-\-no\-glob
before each filename that should not be globbed,
which is necessary if you need to process files whose names
contain wildcard characters.
.TP
\fB\-p\fR, \fB\-\-sox\-pipe\fR
This can be used in place of an output filename to specify that
its output will be used as the input to another SoX command.
For example, in the command:
.XE
   play_ng "|sox_ng \-n \-p synth 2" "|sox_ng \-n \-p synth 2 tremolo 10"
.XX
\fBplay_ng\fR thinks it's playing two files in succession
that come from pipes, but in fact they both come from other invocations of SoX,
each with different effects.
.SP
.B \-p
is in fact an alias for `\fB\-t sox \-\fR'.
.TP
\fB\-d\fR, \fB\-\-default\-device\fR
This can be used in place of an input or output filename to specify that
the default audio device (if one has been built into SoX) is to be used.
This is akin to invoking
.B rec_ng
or
.B play_ng
as described above.
.TP
\fB\-n\fR, \fB\-\-null\fR
This can be used in place of an input or output filename to specify that
a `null file' is to be used.  Here, `null file' refers to a
SoX-specific mechanism and is not related to any operating system
mechanism with some special name.
.SP
Using a null file as an input is equivalent to
using a normal audio file that contains an infinite amount
of silence and, as such, is not generally useful unless used
with an effect that specifies a finite time length
such as \fBtrim\fR or \fBsynth\fR.
.SP
Using a null file as an output amounts to discarding the audio
and is mainly useful with effects that produce information about the
audio instead of affecting it such as \fBnoiseprof\fR, \fBstat\fR
and \fBspectrogram\fR.
.SP
The sampling rate associated with a null file
is by default 48kHz but, as with a normal
file, this can be overridden using format options
such as \fB\-r\fR
(see below).
.SS Supported File and Audio Device Types
See
.BR soxformat_ng (7)
for a list and description of the supported file formats and audio device
drivers.
.SH OPTIONS
.SS Global Options
These options can be specified on the command line at any point
before the first effect name.
.SP
The
.B SOX_OPTS
environment variable can be used to
provide alternative default values for SoX's global options.
See \fBENVIRONMENT\fR (below).
.TP
\fB\-\-buffer\fR \fIbytes\fR, \fB\-\-input\-buffer\fR \fIbytes\fR
Set the size in bytes of the buffers used for processing audio (default 8192).
.B \-\-buffer
applies to input, effects and output processing;
.B \-\-input\-buffer
applies only to input processing, for which it overrides
.B \-\-buffer
if both are given.
.SP
Large values for
.B \-\-buffer
may cause SoX to be become slow to respond to requests to terminate or to skip
to the next input file.
.TP
\fB\-\-clobber\fR
Don't prompt before overwriting an existing file that has the same name as
an output file. This is the default behaviour; to override it,
use \fB\-\-no\-clobber\fR.
.TP
\fB\-\-combine concatenate\fR\^|\^\fBmerge\fR\^|\^\fBmix\fR\^|\^\fBmix\-power\fR\^|\^\fBmultiply\fR\^|\^\fBsequence\fR
Select the input file combining method.
See \fBInput File Combining\fR above for a description of them.
.TP
\fB\-D\fR, \fB\-\-no\-dither\fR
Disable automatic dither\*msee \fBDithering\fR above.  This
may be useful to ensure that SoX produces the same output
in successive runs or if a file has been converted from 16 to
24 bit with the intention of doing some processing on it, but in fact
no processing is needed after all and the original 16 bit file has
been lost, in which case no dither is needed when converting the
file back to 16 bits.  See the
.B stats
effect for how to determine the actual bit-depth of the audio within a
file.
.TP
\fB\-\-effects\-file \fIfilename\fR
Read a file to obtain all effects and their arguments.
The file is parsed as if the values were specified on the
command line.  A new line can be used in place of the special \fB:\fR
marker to separate effect chains.  For convenience, such markers at the
end of the file are normally ignored; if you want to specify an empty
last effects chain, use an explicit \fB:\fR by itself on the last line
of the file.  This option causes any effects specified on the command
line to be discarded.
.TP
\fB\-G\fR, \fB\-\-guard\fR
Automatically invoke the
.B gain
effect to guard against clipping. E.g.
.XE
   sox_ng \-G in.au \-b 16 out.au rate 44100 dither \-s
.XX
is shorthand for
.XE
   sox_ng in.au \-b 16 out.au gain \-h rate 44100 gain \-rh dither \-s
.XX
See
.BR \-V,
.BR \-\-norm,
and the
.B gain
effect.
.TP
\fB\-h\fR, \fB\-\-help\fR
Show SoX's version number and usage information.
.TP
\fB\-\-help\-effect \fIname\fR
Show usage information for the specified effect.  The name
\fBall\fR can be used to show it for all available effects.
.TP
\fB\-\-help\-format \fIname\fR
Show information about the specified file format.  The name
\fBall\fR can be used to show information for all supported formats.
.TP
\fB\-\-i\fR, \fB\-\-info\fR
If given as the first parameter to
.BR sox_ng ,
behave as
.BR soxi_ng .
.TP
\fB\-m\fR\^|\^\fB\-M\fR
Equivalent to \fB\-\-combine mix\fR and \fB\-\-combine merge\fR respectively.
.TP
.B \-\-magic
If SoX has been built with the optional `libmagic' library, this
option enables its use in helping to detect audio file types.
.TP
\fB\-\-multi\-threaded\fR | \fB\-\-single\-threaded\fR
By default, SoX is `multi threaded' and
processes audio channels for most multichannel effects in parallel
on hyperthreading and multicore processors.
.SP
If the \fB\-\-single\-threaded\fR option is given, it processes them
one at a time, which may be more efficient on systems with less RAM.
.SP
A larger buffer size than the default may be needed
to benefit more from multithreaded processing
(e.g. 131072; see \fB\-\-buffer\fR above).
.TP
\fB\-\-no\-clobber\fR
Prompt before overwriting an existing file with the same name as that
given for the output file.
.SP
Unintentionally overwriting a file is easier than you might think, for
example, if you accidentally enter
.XE
   sox_ng file1 file2 effect1 effect2 ...
.XX
when what you really meant was
.XE
   play_ng file1 file2 effect1 effect2 ...
.XX
then, without this option, file2 will be overwritten.  Hence, using
this option is recommended and can be set in the \fBSOX_OPTS\fR
environment variable (see \fBENVIRONMENT\fR below).
.TP
\fB\-\-norm\fR[\fB=\fIdB-level\fR]
Automatically invoke the
.B gain
effect to guard against clipping and to normalize the audio. E.g.
.XE
   sox_ng \-\-norm in.au \-b 16 out.au rate 44100 dither \-s
.XX
is shorthand for
.XE
   sox_ng in.au \-b 16 out.au gain \-h rate 44100 gain \-nh dither \-s
.XX
Optionally, the audio can be normalized to a given level, usually below 0 dBFS:
.XE
   sox_ng \-\-norm=\-3 in.au out.au
.XX
See
.BR \-V ,
.B \-G
and the
.B gain
effect.
.TP
\fB\-\-play\-rate\-arg \fIarg\fR
Selects a quality option to be used when the \fBrate\fR effect is invoked
automatically when playing audio.  This option is typically set via the
.B SOX_OPTS
environment variable (see \fBENVIRONMENT\fR below)
and its default value, when playing, is \fB\-l\fR (low quality but fast).
See the \fBrate\fP effect for other alternatives.
.TP
\fB\-\-plot gnuplot\fR\^|\^\fBoctave\fR\^|\^\fBoff\fR
If not set to
.B off
(the default if
.B \-\-plot
is not given), run in a mode that can be used in conjunction with the
\fBgnuplot\fR program or the GNU Octave program to assist with the selection
and configuration of many of the transfer function-based effects.
For the first given effect that supports the selected plotting program,
SoX outputs commands to plot the effect's transfer function and
stops without actually processing any audio.  E.g.
.XE
   sox_ng \-\-plot octave input-file \-n highpass 1320 > highpass.plt
   octave highpass.plt
.XX
.TP
\fB\-q\fR, \fB\-\-no\-show\-progress\fR
Run in quiet mode when SoX wouldn't otherwise do so.
This is the opposite of the \fB\-S\fR option.
To suppress error and warning messages, see \fB\-V\fR below.
.TP
\fB\-R\fR
Run in `repeatable' mode.  When this option is given,
SoX embeds a time stamp in the output file
if its format supports comments
and will seed pseudo random number generators, as used by
\fBdither\fR, with that number, ensuring that successive SoX
invocations with the same inputs and the same parameters yield the
same output.
.TP
\fB\-\-replay\-gain track\fR\^|\^\fBalbum\fR\^|\^\fBoff\fR
Select whether or not to apply replay-gain adjustment to input files.
The default is
.B off
for
.B sox_ng
and
.BR rec_ng ,
.B album
for
.B play_ng
when (at least) the first two input files are tagged with the same Artist and
Album names and
.B track
for
.B play_ng
otherwise.
.TP
\fB\-S\fR, \fB\-\-show\-progress\fR
Display input file format/header information, processing progress as
a percentage of the input file(s), elapsed time, remaining time
(if known, in brackets) and the number of samples written to the
output file.  Also shown is a peak level meter, and an indication of
whether clipping has occurred.  The peak level meter shows up to two channels
and is calibrated for digital audio as follows:
.ne 8
.TS
center;
cI lI cI lI
c l l c l.
dB FSD	Display	\ 	dB FSD	Display
\-25	\-	\ 	\-11	====
\-23	T{
=
T}	\ 	\-9	====\-
\-21	=\-	\ 	\-7	=====
\-19	==	\ 	\-5	=====\-
\-17	==\-	\ 	\-3	======
\-15	===	\ 	\-1	=====!
\-13	===\-
.TE
.DT
.SP
A three-second peak-held value of the headroom in dBs is shown to the right
of the meter if the headroom is less than 6dB.
.SP
This option is enabled by default when using
SoX to play or record audio but can be disabled with \fB\-q\fR.
.TP
\fB\-T\fR\fR
Equivalent to \fB\-\-combine multiply\fR
.TP
\fB\-\-temp \fIdirectory\fR
Specify that any temporary files should be created in the given directory.
This can be useful if there are permission or free space problems with the
default location. In this case, using `\fB\-\-temp .\fR' (to use the
current directory) is often a good solution.
.TP
\fB\-\-version\fR
Show SoX's version number and exit.
.IP \fB\-V\fR[\fIlevel\fR]
Set verbosity. This is particularly useful for seeing how any automatic
effects have been invoked by SoX.
.SP
SoX displays messages on the console (stderr) according to the following
verbosity levels:
.IP
.RS
.IP 0
No messages are shown at all; use the exit status to determine
if an error has occurred.
.IP 1
Only error messages are shown.  These are generated if
SoX cannot complete the requested commands.
.IP 2
Warning messages are also shown.  These are generated if
SoX can complete the requested commands
but not exactly according to the requested command parameters,
or if clipping occurs.
This is the default.
.IP 3
Descriptions of
SoX's processing phases are also shown, to see exactly how
SoX is processing your audio.
.IP "4 to 6"
Messages to help with debugging
SoX are also shown.
.RE
.IP
Each occurrence of the \fB\-V\fR option increases the
verbosity level by 1. Alternatively, the verbosity level can be set
to an absolute number by specifying it immediately after the
.BR \-V ,
e.g.
.B \-V0
shuts it up.
.IP
.SS Input File Options
These options apply to the first input filename that follows them
on the command line.
.TP
\fB\-\-ignore\-length\fR
Override the audio length given in an audio file's header. If
this option is given, SoX keeps reading audio until it reaches
the end of the input file.
.TP
\fB\-v\fR, \fB\-\-volume\fR \fIfactor\fR
Intended for use when combining multiple input files, this option
adjusts the volume of the file that follows it on the command line by a
factor of \fIfactor\fR. This allows it to be `balanced' w.r.t. the other
input files.  This is a linear (amplitude) adjustment, so a number less
than 1 decreases the volume and a number greater than 1 increases it.  If a
negative number is given then, in addition to the volume adjustment,
the audio signal will be inverted.
.SP
See the \fBnorm\fR, \fBvol\fR and \fBgain\fR
effects, \fBInput File Balancing\fR above and the
\fBSpecial Filenames\fR' section on \fIwildcard-filenames\fR.
.SS Input & Output File Format Options
These options apply to the input or output file whose name they
immediately precede on the command line and are used mainly when
working with headerless file formats or when specifying a format
for the output file that is different from that of the input file.
.TP
\fB\-b\fR \fIbits\fR, \fB\-\-bits\fR \fIbits\fR
Set the number of bits (a.k.a. bit-depth or word length) in each
encoded sample.  It is not applicable to complex encodings such as MP3 or GSM
and not necessary with encodings that have a fixed number of bits such as
A-law, \(*m-law and ADPCM.
.SP
For an input file, the most common use for this option is to inform
SoX of the number of bits per sample in a `raw' (`headerless') audio
file.  For example
.XE
   sox_ng \-r 16k \-e signed \-b 8 input.raw output.wav
.XX
converts a particular `raw' file to a self-describing `WAV' file.
.SP
For an output file, this option can be used to set the output encoding size.
By default, the output encoding size is be set to the input encoding size,
provided it is supported by the output file type.
For example:
.XE
   sox_ng input.cdda \-b 24 output.wav
.XX
converts raw CD digital audio (16-bit, signed-integer) to a
24-bit (signed-integer) `WAV' file.
.TP
\fB\-c\fR \fICHANNELS\fR, \fB\-\-channels\fR \fICHANNELS\fR
Sets the number of audio channels in the audio file. This can be any number
greater than zero.
.SP
For an input file, the most common use for this option is to inform
SoX of the number of channels in a `raw' (headerless) audio file.
Occasionally, it may be useful to use this option with a headered
file to override the (presumably incorrect) value in the
header but this is only supported with certain file types.
For example:
.XE
   sox_ng \-r 48k \-e float \-b 32 \-c 2 input.raw output.wav
.XX
converts a `raw' file to a self-describing `WAV' file.
.XE
   play_ng \-c 1 music.wav
.XX
interprets the file data as belonging to a single channel regardless
of what is indicated in the file header and if the file does
in fact have two channels, it is played at half speed.
.SP
For an output file, this option provides a shorthand for specifying
that the
.B channels
effect should be invoked in order to change (if necessary) the number
of channels in the audio signal to the number given.  For
example, the following two commands are equivalent:
.XE
.ne 2
   sox_ng input.wav \-c 1 output.wav bass \-b 24
   sox_ng input.wav      output.wav bass \-b 24 channels 1
.XX
though the second form is more flexible as it allows effects to
be ordered arbitrarily.
.TP
\fB\-e \fIENCODING\fR, \fB\-\-encoding\fR \fIENCODING\fR
Set the audio encoding type, sometimes needed with file types that
support more than one encoding scheme such as raw, WAV or
AU but not with MP3 or FLAC.
The available encoding types are as follows:
.RS
.IP \fBsigned\-integer\fR
PCM data stored as signed (`two's complement') integers.  Commonly used
with a 16 or 24 \-bit encoding size.
A value of 0 represents minimum signal power.
.IP \fBunsigned\-integer\fR
PCM data stored as unsigned integers.  Commonly used
with an 8-bit encoding size.  A value of 0 represents maximum signal
power.
.IP \fBfloating\-point\fR
PCM data stored as IEEE 753 single precision (32-bit) or double
precision (64-bit) floating point (`real') numbers.
A value of 0 represents minimum signal power.
.IP \fBa\-law\fR
International telephony standard for logarithmic encoding to 8 bits per
sample.  It has a precision equivalent to roughly 13-bit PCM and is
sometimes encoded with reversed bit-ordering (see the
.B \-X
option).
.IP \fBu\-law\fR\^/\^\fBmu\-law\fR
The North American telephony standard for logarithmic encoding to 8 bits per
sample, a.k.a. \(*m-law has a precision equivalent to roughly
14-bit PCM and is
sometimes encoded with reversed bit-ordering (see the
.B \-X
option).
.IP \fBoki\-adpcm\fR
OKI (a.k.a. VOX, Dialogic, or Intel) 4-bit ADPCM
has a precision equivalent to roughly 12-bit PCM.
ADPCM is a form of audio compression that makes a good
compromise between audio quality and encoding/decoding speed.
.IP \fBima\-adpcm\fR
IMA (a.k.a. DVI) 4-bit ADPCM has a precision equivalent to roughly 13-bit PCM.
.IP \fBms-adpcm\fR
Microsoft 4-bit ADPCM has a precision equivalent to roughly 14-bit PCM.
.IP \fBgsm\-full\-rate\fR
GSM is currently used for the majority of the world's digital
wireless telephone calls.  It utilizes several audio
formats with different bit rates and associated speech quality.
SoX has support for GSM's original 13kbps `Full Rate' audio format.
.RE
.TP
\ 
Encoding names can be abbreviated where this would not be ambiguous;
e.g. \fBunsigned\-integer\fR can be given as \fBun\fR, but not \fBu\fR (ambiguous
with \fBu-law\fR).
.SP
For an input file, the most common use for this option is to inform
SoX of the encoding of a `raw' (`headerless') audio
file (see the examples in
.B \-b
and
.B \-c
above).
.SP
For an output file, this option can be used (perhaps with
.BR \-b )
to set the output encoding. For example:
.XE
   sox_ng input.cdda \-e float output1.wav
   sox_ng input.cdda \-b 64 \-e float output2.wav
.XX
converts a raw CD digital audio (16-bit signed integer) to
floating point `WAV' files of single and double precision respectively.
.SP
If this option is not given, the output encoding will be the same as
the input encoding, provided it is supported by the output file type.
.TP
\fB\-\-no\-glob\fR
Specifies that filename `globbing' (wildcard matching) should not be
performed by SoX on the following filename.  For example, if the current
directory contains the two files `five-seconds.wav' and `five*.wav', then
.XE
   play_ng \-\-no\-glob "five*.wav"
.XX
can be used to play just the single file `five*.wav'.
.TP
\fB\-r, \fB\-\-rate\fR \fIrate\fR[\fBk\fR]
Gives the sample rate in Hz (or kHz if followed by \fBk\fR) of the file.
.SP
For an input file, the most common use for this option is to inform
SoX of the sample rate of a `raw' (`headerless') audio file (see the
examples in
.B \-b
and
.B \-c
above).
Occasionally it may be useful to use this option with a `headered'
file to override the value in the header, though this is only supported
with certain file types.
For example, if audio was recorded with a sample rate of 48k from
a source that played back a little too slowly, say 1\*d5%,
.XE
   sox_ng \-r 48720 input.wav output.wav
.XX
would correct the speed by changing only the file header (but see the
.B speed
effect for the more usual solution to this problem).
.SP
For an output file, this option provides a shorthand for specifying
that the
.B rate
effect should be invoked in order to change (if necessary) the sample
rate of the audio signal to the given value.  For example, the
following two commands are equivalent:
.XE
.ne 2
   sox_ng input.wav \-r 48k output.wav bass \-b 24
   sox_ng input.wav        output.wav bass \-b 24 rate 48k
.XX
though the second form is more flexible as it allows
.B rate
options to be given and allows the effects to be ordered arbitrarily.
.TP
\fB\-t\fR, \fB\-\-type\fR \fIFILE-TYPE\fR
Give the type of an audio file.  For both input and output files,
this option is commonly used to inform SoX of the type a `headerless'
audio file where the actual/desired type cannot be
determined from the filename extension.  For example:
.XE
   another-command | sox_ng \-t mp3 \- output.wav
   sox_ng input.wav \-t raw output.bin
.XX
It can also be used to override the type implied by an input filename
extension but, if overriding with a type that has a header, SoX
exit with an error message if such a header is not actually present.
.SP
There are also pseudo filetypes that tell SoX to use a specified
format module that handles more than one type of audio file
such as \fB\-t\ sndfile\fR and \fB\-t\ ffmpeg\fR or when a type
of file can be handled by several different format modules,
such as WAV files containing MP3-encoded data.
.SP
Furthermore, the file type can be used to select a particular
audio device driver for recording and playing.
.SP
See
.BR soxformat_ng (7)
for a list of supported file types.
.PP
\fB\-L\fR, \fB\-\-endian\ little\fR
.br
\fB\-B\fR, \fB\-\-endian\ big\fR
.br
\fB\-x\fR, \fB\-\-endian\ swap\fR
.if t .sp -.5
.if n .sp -1
.TP
\ 
These options specify whether the byte-order of the audio data is,
respectively, `little endian', `big endian' or the opposite to that of
the system on which SoX is being used.  Endianness applies only to data
encoded as floating point or as signed or unsigned integers of 16 or
more bits.  It is often necessary to specify one of these options for
headerless files and sometimes necessary for (otherwise)
self-describing files.  A given endian-setting option may be ignored
for an input file whose header contains a specific endianness
identifier or for an output file that is actually an audio device.
.SP
.B N.B.
Unlike other format characteristics, the endianness (byte, nibble, &
bit ordering) of the input file is not automatically used for the output
file. For example, when the following is run on a little-endian system:
.XE
   sox_ng \-B audio.s16 trimmed.s16 trim 2
.XX
\f(CWtrimmed.s16\fR will be created as little-endian;
.XE
   sox_ng \-B audio.s16 \-B trimmed.s16 trim 2
.XX
must be used to preserve big-endianness in the output file.
.SP
The
.B \-V
option can be used to check the selected orderings.
.TP
\fB\-N\fR, \fB\-\-reverse\-nibbles\fR
Specifies that the nibble ordering of the samples (i.e. the 2 halves of a byte)
should be reversed, which is sometimes useful with ADPCM-based formats.
.SP
See the N.B. in the section on
.B \-x
above.
.TP
\fB\-X\fR, \fB\-\-reverse\-bits\fR
Specifies that the bit ordering of the samples should be reversed, which is
sometimes useful with a few (mostly headerless) formats.
.SP
See the N.B. in the section on
.B \-x
above.
.SS Output File Format Options
These options only apply to output files and may only precede an output
filename on the command line.
.TP
\fB\-\-add\-comment \fITEXT\fR
Append a comment to the output file header (where applicable).
.TP
\fB\-\-comment \fITEXT\fR
Specify the comment text to store in the output file header (where
applicable).
.SP
SoX provides a default comment `Processed by SoX' if this option (or
.BR \-\-comment\-file )
is not given. To specify that no comment should be stored in the output file,
use
.B "\-\-comment \(dq\(dq" .
.TP
\fB\-\-comment\-file \fIFILENAME\fR
Specify a file containing the comment text to store in the output
file header (where applicable).
.TP
\fB\-C\fR, \fB\-\-compression\fR \fIFACTOR\fR
Set the compression factor for variably-compressed output file formats.
If this option is not given then a default compression factor applies.
The compression factor is interpreted differently for different
compressed file formats; see the description of the file formats that
use this option in
.BR soxformat_ng (7)
for more information.
.SH EFFECTS
In addition to converting, playing and recording audio files, SoX can
be used to invoke a number of audio effects.  Multiple effects may
be applied by specifying them one after the other at the end of the SoX
command line, forming an `effects chain'.
Note that applying multiple effects in real time (i.e. when playing audio)
may require a high performance computer.
.SP
Some of the SoX effects are primarily intended to be applied to a single
instrument or `voice'. To facilitate this, the \fBremix\fR effect and
the global SoX option \fB\-M\fR can be used to isolate then recombine
tracks from a multitrack recording.
.SS Multiple Effects Chains
A single effects chain is made up of one or more effects.  Audio from
the input runs through the chain until either the end of the input file
is reached or an effect terminates the chain.
.SP
SoX supports running multiple effects chains over the input audio.
In this case, when one chain indicates that it is done processing audio,
the audio data is sent through the next effects chain.  This
continues until either no more effects chains exist or the input has
reached the end of the file.
.SP
Effects chains can be separated by placing a
.B :
(colon) after an effect;
any following effects are a part of a new effects chain.
.SP
It is important to place the effect that stops the chain
as the first effect in the chain because any samples
that are buffered by effects to the left of the terminating effect
will be discarded.  The amount of samples discarded is related to the
.B \-\-buffer
option and it should be kept small, relative to the sample rate, if
the terminating effect cannot be first.  Further information on
stopping effects can be found in the
.B Stopping SoX
section.
.SP
There are a few pseudo-effects that can help when using multiple effects chains.
These include
.BR newfile ,
which starts writing to a new output file before moving to the
next effects chain, and
.BR restart ,
which moves back to the first effects chain.  Pseudo-effects
must be specified as the first effect in a chain and as the only
effect in a chain (i.e. they must have a
.B :
before and after them).
.SP
Here is an example of multiple effects chains.  It splits the
input file into multiple files, each of 30 seconds in length and
each output filename will have unique number in its name,
as documented in the
.B Output Files
section.
.XE
   sox_ng in.au out.au trim 0 30 : newfile : restart
.XX
.SS Common Notation And Parameters
In the descriptions that follow,
[square brackets] are used to denote parameters that are optional,
{braces} to denote those that are both optional and repeatable,
<angle brackets> to denote those that are repeatable but not
optional and pipe characters `|' separate options from which to choose
one of several alternatives.
Where applicable, default values for optional parameters are shown
(in parentheses).
.SP
The following parameters are used with, and have the same meaning for,
several effects:
.TP
\fIfrequency\fR
A frequency in Hz or, if followed by \fBk\fR, in kHz or,
if preceded by \fB%\fR, in semitones relative to A (440Hz);
alternatively, scientific note names (e.g. E2) may be used.
.TP
\fIgain\fR
A power gain in dB.
Zero gives no gain, less than zero gives an attenuation
and greater than zero amplifies.
.TP
\fIduration\fR
See \fBTime Specifications\fR below.
.TP
\fIposition\fR
A position within the audio stream; the syntax is
[\fB=\fR\^|\^\fB\-\fR\^|\^\fB+\fR]\fItimespec\fR, where \fItimespec\fR is a
time specification (see below). The optional first character indicates
whether the \fItimespec\fR is to be interpreted relative to the start
(\fB=\fR) or end (\fB\-\fR) of the audio or relative to the previous
\fIposition\fR (\fB+\fR) if the effect accepts multiple positional arguments.
The audio length
must be known for end-relative locations to work, though some effects do accept
\fB\-0\fR for the end of the audio even if the length is unknown.
Which of \fB=\fR, \fB\-\fR and \fB+\fR is the default depends on the effect
and is shown in its syntax as, e.g., \fIposition\fR(+).
.SP
Examples: `=2:00' is two minutes into the audio stream,
`\-100s' is one hundred samples before the end of the audio,
`+0:12+10s' is twelve seconds and ten samples after the previous position
and
`\-0.5+1s' is one sample less than half a second before the end of the audio.
.TP
\fIwidth\fR[\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]
Used to specify the bandwidth of a filter.  A number of different
methods to specify the width are available (though not all for every effect).
One of the characters shown may be appended to select the desired method
as follows:
.ne 5
.TS
center;
cI cI lI
cB c l.
\ 	Method	Notes
h	Hz	\ 
k	kHz	\ 
b	Hz	Old non-frequency-warped response
o	octaves	\ 
q	Q-factor	See [2]
s	slope	\ 
.TE
.DT
.SP
For each effect that uses this parameter, the default method (if no
character is appended) is the one that is listed first in the first line of
the effect's description.
.SS Time Specifications
A \fItimespec\fR can be given in one the following two forms:
.TP
[[\fIhours\fB:\fR]\fIminutes\fB:\fR]\fIseconds\fR[\fB.\fIfrac\fR][\fBt\fR]
For example, a time specification of `1:30.5' corresponds to
one minute, thirty and \(12 seconds.
The component values do not have to be normalized; e.g.
`1:23:45', `83:45', `79:0285', `1:0:1425', `1::1425' and `5025'
are all equivalent.
.TP
\fIsamples\fBs\fR
Specifies the number of samples directly, as in `8000s'.  For large sample
counts, \fIe notation\fR is supported: `1.7e6s' is the same as `1700000s'.
.PP
Time specifications can also be chained with \fB+\fR or \fB\-\fR into a new
time specification where the right part is added to or subtracted from the
total so far.
For example, `3:00\-200s' means two hundred samples less than three minutes.
.PP
If a \fItime specification\fR is a plain whole number with no \fBt\fP or \fBs\fR
suffix, whether it is taken as a number of seconds or a number of samples
depends on the effect in question. At present, it always means seconds
except for the \fIduration\fR parameters of the \fBsilence\fP effect.
.SS Supported Effects
To see whether SoX has support for an optional effect, enter
.B sox_ng \-h
and look for its name in the \fBEFFECTS\fR list;
a categorized list of the effects can be found in the
accompanying README file.
.TP
\fBallpass\fR [\fB\-1\fR\^|\^\fB\-2\fR] \fIfrequency \fR[\fIwidth\fR[\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]]
Apply a two-pole all-pass filter with central frequency \fIfrequency\fR
and filter width \fIwidth\fR.
An all-pass filter changes the
audio's frequency to phase relationship without changing its frequency
to amplitude relationship.  The filter is described in detail in [1].
.SP
\fB-1\fR or \fB-2\fR use an experimental 1-pole or 2-pole filter,
in which case \fIwidth\fR does not apply.
.SP
This effect supports the \fB\-\-plot\fR global option.
.TP
\fBband\fR [\fB\-n\fR] \fIfrequency\fR [\fIwidth\fR[\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]]
Apply a band-pass filter.
The frequency response drops logarithmically
around the center
.IR frequency .
The
.I width
parameter gives the slope of the drop:
the frequencies at
.I frequency
+
.I width
and
.I frequency
\-
.I width
will have half their original amplitudes.
Its default value is half of the center frequency.
.SP
.B band
defaults to a mode oriented to pitched audio,
i.e. voice, singing or instrumental music.
The \fB\-n\fR (for noise) option uses the alternate mode
for unpitched audio (e.g. percussion),
though
\fB\-n\fR introduces a power gain of about 11dB in the filter, so beware
of output clipping.
.B band
introduces noise in the shape of the filter,
peaking at the
center
frequency and settling around it.
.SP
This effect supports the \fB\-\-plot\fR global option.
.SP
See \fBsinc\fR for a band-pass filter with steeper shoulders.
.TP
\fBbandpass\fR\^|\^\fBbandreject\fR [\fB\-c\fR] \fIfrequency width\fR[\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR\^|\^\fBb\fR]
Apply a two-pole Butterworth band-pass or band-reject filter with
central frequency \fIfrequency\fR, and (3dB-point) bandwidth \fIwidth\fR.
The
.B \-c
option applies only to
.B bandpass
and selects a constant skirt gain (peak gain = Q) instead of the
default, a constant 0dB peak gain.
The filters roll off at 6dB per octave (20dB per decade)
and are described in detail in [1].
.SP
These effects support the \fB\-\-plot\fR global option.
.SP
See \fBsinc\fR for a band-pass filter with steeper shoulders.
.TP
\fBbass\fR\^|\^\fBtreble \fIgain\fR [\fIfrequency\fR [\fIwidth\fR[\fBs\fR\^|\^\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]]]
Boost or cut the bass (lower) or treble (upper) frequencies of the audio
using a two-pole shelving filter with a response similar to that
of a standard hifi's tone controls.  This is also
known as shelving equalization.
.SP
\fIgain\fR gives the gain at 0Hz for \fBbass\fR or, for \fBtreble\fR,
whichever is the lower of \(ap22kHz and the Nyquist frequency.
Its useful range is about \-20 (for a large cut) to +20 (for a large boost).
Beware of
.B Clipping
when using a positive \fIgain\fR.
.SP
The filter can be fine-tuned using the following optional parameters:
.SP
\fIfrequency\fR sets the filter's central frequency and so can be
used to extend or reduce the frequency range to be boosted or
cut.
The default values are 100Hz for \fBbass\fR and 3kHz for \fBtreble\fR.
.SP
\fIwidth\fR
determines how
steep the filter's shelf transition is.  In addition to the common
width specification methods,
`slope' (the default) may be used.
Its useful range is
about 0\*d3 for a gentle slope to 1 (the maximum) for a steep slope;
and its default value is 0\*d5.
.SP
The filters are described in detail in [1].
.SP
These effects support the \fB\-\-plot\fR global option.
.SP
See \fBequalizer\fR for a peaking equalization effect.
.TP
\fBbend\fR [\fB\-f \fIframe-rate\fR(25)] [\fB\-o \fIoversampling\fR(16)]
{\fIstart-position(+)\fB,\fIcents\fB,\fIend-position(+)\fR}
.SP
Changes the pitch by specified amounts at specified times without changing
the duration.
Each given triple: \fIstart-position\fB,\fIcents\fB,\fIend-position\fR
specifies one bend.
\fIcents\fR is the number of cents (100 cents = 1 semitone) by which to
bend the pitch. The other values specify the points in time at which to start
and end bending the pitch.
During each bend, the frequency changes logarithmically,
i.e. by the same number of cents per second.
.SP
The pitch bending algorithm uses the Discrete Fourier Transform (DFT)
at a particular frame rate and oversampling rate.
The
.B \-f
and
.B \-o
parameters may be used to adjust these parameters and thus control the
smoothness of the changes in pitch.
.SP
For example, an initial tone is generated, then bent three times, yielding
four different notes in total:
.XE
.ne 2
   play_ng \-n synth 2.5 sin 667 gain 1 \\
	bend .35,180,.25  .15,740,.53  0,\-520,.3
.XX
Here, the first \fBbend\fR runs from 0.35 to 0.6 seconds and the second one from 0.75
to 1.28 seconds.
Note that the clipping that is produced in this example is deliberate;
to remove it, use
.B gain\ \-5
in place of
.BR gain\ 1 .
.SP
See \fBpitch\fR.
.TP
\fBbiquad \fIb0 b1 b2 a0 a1 a2\fR
Apply a biquad Infinite Impulse Response filter
with the given coefficients, where \fIb*\fR and \fIa*\fR are
the numerator and denominator coefficients respectively.
.SP
See http://en.wikipedia.org/wiki/Digital_biquad_filter (where a0 = 1).
.SP
This effect supports the \fB\-\-plot\fR global option.
.TP
\fBchannels \fIchannels\fR
Invoke a simple algorithm to change the number of channels in
the audio signal to the given number:
mixing if decreasing the number of channels or duplicating if
increasing the number of channels.
.SP
The
.B channels
effect is invoked automatically if SoX's \fB\-c\fR option specifies a
number of channels that is different to that of the input file(s).
Alternatively, if this effect is given explicitly, SoX's
.B \-c
option need not be given.  For example, the following two commands are
equivalent:
.XE
.ne 2
   sox_ng input.wav \-c 1 output.wav bass \-b 24
   sox_ng input.wav      output.wav bass \-b 24 channels 1
.XX
though the second form is more flexible as it allows the effects to
be ordered arbitrarily.
.SP
For example, when making a stereo file quadrophonic,
the left and right channels are copied into the third and fourth and
when mixing a four-channel file down to stereo, the left channel is
the mix of the first and third and the right of the second and fourth.
.SP
See
.B remix
for an effect that allows channels to be mixed and selected arbitrarily.
.TP
\fBchorus \fIgain-in gain-out\fR <\fIdelay decay speed depth \fB\-s\fR\^|\^\fB\-t\fR>
Add a chorus effect to the audio.  This can make a single voice sound
like a chorus but can also be applied to instrumentation.
.SP
Chorus resembles an \fBecho\fR effect with a short delay but,
while \fBecho\fR's delay is constant, \fBchorus\fR' delay
varies by a sinusoidal or triangular modulation.
.SP
See [3] for further discussion of the chorus effect.
.SP
The parameters for each chorus give its fixed delay in milliseconds,
the volume of the delayed output,
the frequency in Hz of the modulation,
the depth of the modulation in milliseconds \- each delay ranges from
the fixed \fIdelay\fR to \fIdelay\fR\ \(pl\ \fIdepth\fR \-
and whether the modulation is sinusoidal (\fB\-s\fR) or triangular (\fB\-t\fR).
\fIGain-out\fR is then applied to the sum of the input scaled by \fIgain-in\fP
and the outputs from the delays scaled by their \fIdecay\fRs.
.SP
For internal reasons, there is a limit of 256 chorus stages.
.SP
For a flow diagram of how \fBchorus\fR works,
say \fBsox_ng \-\-help\-effect chorus\fR.
.SP
A typical delay is around 40ms to 60ms; the modulation speed is best
near 0\*d25Hz and the modulation depth around 2ms.
For example, a single delay:
.XE
   play_ng guitar1.wav chorus 0.7 0.9 55 0.4 0.25 2 \-t
.XX
Two delays of the original samples:
.XE
.ne 2
   play_ng guitar1.wav chorus 0.6 0.9 50 0.4 0.25 2 \-t \\
	 60 0.32 0.4 1.3 \-s
.XX
A fuller-sounding chorus (with three additional delays):
.XE
.ne 2
   play_ng guitar1.wav chorus 0.5 0.9 50 0.4 0.25 2 \-t \\
	 60 0.32 0.4 2.3 \-t 40 0.3 0.3 1.3 \-s
.XX
.TP
\fBcompand \fIattack1\fB,\fIdecay1\fR{\fB,\fIattack\fB,\fIdecay\fR}
[\fIsoft-knee-dB\fB:\fR]\fIin-dB1\fR[\fB,\fIout-dB1\fR]{\fB,\fIin-dB\fB,\fIout-dB\fR}
.br
[\fIgain\fR [\fIinitial-volume-dB\fR [\fIdelay\fR]]]
.SP
Compand (compress or expand) the dynamic range of the audio.
.SP
The
.I attack
and
.I decay
parameters (in seconds) determine the time over which the
instantaneous level of the input signal is averaged to determine its
volume; attacks refer to increases in volume and decays refer to
decreases.
For most situations, the attack time (its response to the music getting
louder) should be shorter than the decay time because the human ear is more
sensitive to sudden loud music than sudden soft music.
When more than one pair of attack/decay parameters is specified,
each input channel is companded separately and the number of
pairs must agree with the number of input channels.
Typical values are 0\*d3,0\*d8 seconds.
.SP
The second parameter is a list of points on the compander's transfer
function specified in dB relative to the maximum possible signal
amplitude.  The input values must be in a strictly increasing order but
the transfer function does not have to be monotonically rising.  If
omitted, the value of
.I out-dB1
defaults to the same value as
.IR in-dB1 ;
levels below
.I in-dB1
are not companded but may have gain applied to them.
The point `0,0' is assumed but may be overridden by
`0,\fIout-dBn\fR'.
If the list is preceded by a
.I soft-knee-dB
value, then the points at where adjacent line segments on the
transfer function meet are rounded by the amount given.
Typical values for the transfer function are `6:\-70,\-60,\-20'.
.SP
The third (optional) parameter is an additional gain in dB to be applied
at all points on the transfer function and allows easy adjustment
of the overall gain.
.SP
The fourth (optional) parameter is an initial level to be assumed for
each channel when companding starts.  This lets you supply a
nominal level initially so that, for example, a very large gain is not
applied to initial signal levels before the companding action has begun
to operate: it is quite probable that in such an event, the output would
be severely clipped while the compander gain adjusts itself.
A typical value (for audio which is initially quiet) is
.B \-90
dB.
.SP
The fifth (optional) parameter is a delay in seconds.  The input signal
is analyzed immediately to control the compander, but it is delayed
before being fed to the volume adjuster.  Specifying a delay
approximately equal to the attack/decay times allows the compander to
operate in a predictive rather than a reactive mode.
A typical value is 0\*d2 seconds.
.SP
For a flow diagram of how \fBcompand\fR works,
say \fBsox_ng \-\-help\-effect compand\fR.
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
The following example might be used to make a piece of music with both
quiet and loud passages suitable for listening to in a noisy environment
such as a moving vehicle:
.XE
   sox_ng asz.wav asz-car.wav compand 0.3,1 6:\-70,\-60,\-20 \-5 \-90 0.2
.XX
The transfer function (`6:\-70,...') says that very soft sounds (below
\-70dB) remain unchanged.  This stops the compander from
boosting the volume on `silent' passages such as between movements.
However, sounds in the range \-60dB to 0dB (maximum
volume) are boosted so that the 60dB dynamic range of the
original music is compressed 3-to-1 into a 20dB range, which is
wide enough to enjoy the music but narrow enough to get around the
road noise.  The `6:' selects 6dB soft-knee companding.
The \-5\ dB output gain is needed to avoid clipping (the number is
inexact and was derived by experimentation).
The \-90\ dB for the initial volume will work fine for a clip that starts
with near silence and the delay of 0\*d2 seconds makes
the compander react more quickly to sudden volume changes.
.SP
In the next example, \fBcompand\fR is used as a noise-gate for when the
noise is at a lower level than the signal:
.XE
   play_ng in.au compand .1,.2 \-inf,\-50.1,\-inf,\-50,\-50 0 \-90 .1
.XX
Here is another noise-gate, this time for when the
noise is at a higher level than the signal (making it, in some ways,
similar to a squelch effect):
.XE
   play_ng in.au compand .1,.1 \-45.1,\-45,\-inf,0,\-inf 45 \-90 .1
.XX
This effect supports the \fB\-\-plot\fR global option (for the transfer function).
.SP
See
.B mcompand
for a multiple-band companding effect.
.TP
\fBcontrast \fR[\fIenhancement-amount\fR(75)]
Comparable with compression, this effect modifies an audio signal to
make it sound louder.
.I enhancement-amount
controls the amount of the enhancement and is a number in the range 0\-100.
Note that
.I enhancement-amount
= 0 still gives a significant contrast enhancement.
.SP
See the
.B compand
and
.B mcompand
effects.
.TP
\fBdcshift \fIshift\fR [\fIlimitergain\fR]
Apply a DC shift to the audio.  This can be useful to remove a DC
offset (caused perhaps by a hardware problem in the recording chain)
from the audio.  The effect of a DC offset is reduced headroom and
hence volume.
The
.B stat
or
.B stats
effect can be used to determine if a signal has a DC offset.
.SP
The given \fIdcshift\fR value is a floating point number in the range
of \(+-2 that indicates the amount to shift the audio (which is in the
range of \(+-1).
.SP
An optional
.I limitergain
can be specified as well.  It should have a value much less than 1
(e.g. 0\*d05 or 0\*d02) and is used only on peaks to prevent clipping.
.SP
An alternative approach to removing a DC offset (albeit with a short delay)
is to use the
.B highpass
filter effect at a frequency of say 10Hz, as illustrated in the following
example:
.XE
   sox_ng \-n dc.wav synth 5 sin %0 50
   sox_ng dc.wav fixed.wav highpass 10
.XX
.TP
\fBdeemph\fR
Apply Compact Disc (IEC 60908) de-emphasis with a treble attenuation shelving
filter.
.SP
Pre-emphasis was applied in the mastering of some CDs issued in the early
1980s.  These included many classical music albums, as well as now
sought-after issues of albums by The Beatles, Pink Floyd and others.
Pre-emphasis should be removed at playback time by a de-emphasis
filter in the playback device.  However, not all modern CD players have
this filter and very few PC CD drives have it; playing pre-emphasized
audio without the correct de-emphasis filter results in audio that sounds harsh
and is far from what its creators intended.
.SP
With the
.B deemph
effect, it is possible to apply the necessary de-emphasis to audio that
has been extracted from a pre-emphasized CD and then either burn the
de-emphasized audio to a new CD (which will then play correctly on any
CD player) or simply play the correctly de-emphasized audio files on the
PC.  For example:
.XE
   sox_ng track1.wav track1\-deemph.wav deemph
.XX
and then burn track1-deemph.wav to CD, or
.XE
   play_ng track1\-deemph.wav
.XX
or simply
.XE
   play_ng track1.wav deemph
.XX
The de-emphasis filter is implemented as a biquad and requires the input
audio sample rate to be either 44.1kHz or 48kHz.  Its maximum deviation
from the ideal response is only 0\*d06dB (up to 20kHz).
.SP
This effect supports the \fB\-\-plot\fR global option.
.TP
\fBdelay\fR {\fIposition(=)\fR}
Delay one or more audio channels such that they start at the given
\fIposition\fR.
For example,
.B delay 1\*d5 +1 3000s
delays the first channel by 1\*d5 seconds, the second channel by 2\*d5
seconds (one second more than the previous channel), the third channel
by 3000 samples and leaves other channels undelayed.
The following (one long) command plays a chime sound:
.XE
.ne 3
   play_ng \-n synth \-j 3 sin %3 sin %\-2 sin %\-5 sin %\-9 \\
	sin %\-14 sin %\-21 fade h .01 2 1.5 delay \\
	1.3 1 .76 .54 .27 remix \- fade h 0 2.7 2.5 norm \-1
.XX
and this arpeggiates a guitar chord:
.XE
.ne 2
   play_ng \-n synth pl G2 pl B2 pl D3 pl G3 pl D4 pl G4 \\
	delay 0 .05 .1 .15 .2 .25 remix \- fade 0 4 .1 norm \-1
.XX
To delay all channels by the same amount, use the \fBpad\fP effect.
.TP
\fBdither\fR [\fB\-S\fR\^|\^\fB\-s\fR\^|\^\fB\-f \fIfilter\fR] [\fB\-a\fR] [\fB\-p \fIprecision\fR]
Apply dithering to the audio.
Dithering deliberately adds a small amount of noise to the signal in
order to mask audible quantization effects that can occur if the output
sample size is less than 24 bits.  With no options, this effect
adds TPDF white noise.
.SP
The \fB\-s\fR option enables noise-shaping with the \fBshibata\fP filter
and with the
.B \-f
option it is possible to select a particular noise-shaping filter from
the following list: \fBlipshitz\fR, \fBf-weighted\fR, \fBmodified-e-weighted\fR,
\fBimproved-e-weighted\fR, \fBgesemann\fR, \fBshibata\fR, \fBlow-shibata\fR
and \fBhigh-shibata\fR.
The filter types are distinguished by the following properties:
audibility of noise, level of (inaudible, but in some circumstances
problematic) shaped high frequency noise and processing speed
and they are available for the following sample rates:
.ne 8
.TS
center;
lI lI
l l.
Filter	Sample rates
lipshitz	44100
f-weighted	46000
e-weighted	46000
gesemann	44100,48000
shibata	8000,11025,16000,22050,32000,37800,44100,48000
low-shibata	44100,48000
high-shibata	44100
.TE
.DT
.SP
The
.B \-S
option selects a slightly `sloped' TPDF, biased towards higher
frequencies.  It can be used at any sampling rate but, below \(~~22kHz,
plain TPDF is probably better and, above \(~~ 37kHz, noise-shaping
(if available) is probably better.
.SP
The
.B \-a
option enables a mode where dithering (and noise-shaping if applicable)
are automatically enabled only when needed.  The most likely use for
this is when applying fade in or out to an already dithered file, so
that the redithering applies only to the faded portions.  However, auto
dithering is not foolproof, so the fades should be checked carefully
for any noise modulation; if this occurs, then either redither the whole
file or use \fBtrim\fP and \fBfade\fR and concatenate the results.
.SP
The
.B \-p
option overrides the target precision in bits and can be from 1 to 24.
.SP
If the SoX global option
.B \-R
option is not given, the pseudo-random number generator used to
generate the white noise is reseeded, i.e. the generated noise
will be different on every invocation.
.SP
If the target precision is 1-bit, the \fBsdm\fR effect is applied
automatically with default settings. Invoke it manually to control its
options.
.SP
See the section on \fBDithering\fR (above).
.TP
\fBdolbyb\fR [\fB\-e\fR|\fB\-d\fR] [\fB\-u\fIupsamp\fR] [\fB\-h\fR] [\fB\-t\fIgain\fR(1.0)] [\fB\-a prec\fR(-5.0)] [\fB\-f\fR{\fB1\fR|\fB2\fR|\fB3\fR|\fB4\fR}]
\fBdolbyb\fR is a Dolby B decoder/encoder based on dolbybcsoftwaredecode
which simulates the operation of a Dolby\ B en/decoder's electronic circuit.
.SP
By default, \fBdolbyb\fR applies Dolby\ B decoding to its input signal;
with \fB\-e\fR it does Dolby\ B encoding. \fB\-d\fR is also accepted
but only for symmetry, as it is the default mode of operation.
.SP
\fB\-u\fR sets the upsampling ratio to use in the sliding filter.
Digital filtering only works well if the sample rate is well above
the cutoff frequency of the filter. For Dolby\ B's sliding filter,
that frequency can be as high as 34kHz and this does not work well
if the sample rate is only 44.1Khz. To get around this, it upsamples
the audio to a higher rate when it passes through this filter.
By default, \fB\-u0\fR, the upsampling rate is set automatically
so that the upper sample rate is at least 200Khz;
upsampling can be switched off with \fB\-u1\fR.
.SP
If \fB\-h\fR is given, upsampling is used throughout the effect
from when the audio enters to when it leaves, not just in the sliding filter.
As \fBdolbyb\fR's up/downsampling algorithm is simple
(repeating and averaging samples) you may obtain higher quality results
by upsampling with \fBrate\fR before \fBdolbyb\ \-u1\fR and
downsampling it afterwards.
.SP
\fB\-t\fR ("threshold") adjusts the gain when the audio is fed
to the Dolby gain control circuits.
When a tape deck is encoding or decoding a magnetic tape,
it knows the signal level at the tape heads but with audio files
the maximum signal level may not accurately represent the tape's
maximum flux density (200nWb/m for cassette tapes), giving erroneous results.
The \fB\-t\fR option adjusts the volume level at which
the sliding filter reacts to overcome this.
Its default value is 1.0, which assumes that the maximum amplitude
of the signal represents the maximum recording level on tape;
higher values assume that it was recorded too quietly and values
below 1.0 are for when it was recorded too loud.
.SP
To begin with, when you have little idea of what level to use,
try a wide range of levels like 5, 10, 15 and 20.
If the result sounds muffled, the threshold is too low and
if it seems to have too much treble, the threshold is too high.
Once you know the approximate level, you can try more closely-spaced levels
and listen carefully to find the best level possible.
Logic would suggest listening to where tracks fade out, to see if
the treble increases, but this method doesn't seem to work well
and the best way seems to be to see how low the level can be set
before the results sound dull and muffled, then choose a level
a bit higher than this; you can just about hear the difference
between results that differ in threshold setting by about 2.
.SP
In decode mode, the program has to use trial and error to get the
right output sample values. \fB\-a\fR sets how accurate it
needs to be before it is considered OK. A figure of 0.0\ dB would
mean an accuracy of about 1 sample value. The default is -5.0\ dB,
which is accurate to less than one sample value.
.SP
\fB\-f\fR selects one of four types of filter to use.
The program originally simulated an analog circuit for a Dolby\ B
noise reducer. However, too much filtering in the side path was
altering the phase of the side path audio, which caused problems
when the side path was recombined with the main signal. Basically
signals don't add together very well if there is too much difference
in the phase.
To fix this, there are now 4 filter modes with hopefully less of a
phase change:
.RS
.TP
.B \-f1
is the original method.
.TP
.B \-f2
is a newer method that seems to work better than 1.
.TP
.B \-f3
is another rearrangement which in practice doesn't seem to
be any better than 1.
.TP
.B \-f4
seems to work best, hence it is the default mode.
.RE
For further detail on these parameters and advice on
digitizing and processing Dolby\ B-encoded tapes, consult
the wiki pages under https://codeberg.org/martinwguy/libdolbyb
.TP
\fBdop\fR
DSD over PCM.  1-bit DSD data is packed into 24-bit samples for
transport over non-DSD-aware links.
.TP
\fBdownsample\fR [\fIfactor\fR(2)]
Downsample the signal by an integer factor: Only the first of
each \fIfactor\fR samples is retained, the others are discarded.
.SP
No decimation filter is applied.  If the input is not a properly
bandlimited baseband signal, aliasing will occur.  This may be
desirable, e.g., for frequency translation.
.SP
For a general resampling effect with antialiasing, see \fBrate\fR.
See \fBupsample\fR.
.TP
\fBearwax\fR
This effect takes a 44.1kHz stereo signal and adds audio cues that,
when listened to on headphones, move the soundstage from inside your head
to outside and in front of you, as if listening to loudspeakers.
.TP
\fBecho \fIgain-in gain-out\fR <\fIdelay decay\fR>
Add echoes to the audio.
In nature, echoes are reflected sound and digital echo
effects emulate this and are often used to help fill
out the sound of a single instrument or vocal.
.SP
To see how \fBearwax\fR works, say \fBsox_ng \-\-help\-effect earwax\fR.
.SP
\fIGain-in\fR controls how much of the input signal is delivered clean
to the output,
\fIdelay\fR is the time difference in milliseconds
between the original signal and its reflection,
\fIdecay\fR is the loudness of the reflected signal and
\fIgain-out\fR is a final volume adjustment of the result.
.SP
There is no limit to the number of delay/decay pairs you can use
and gains and decays can be negative or greater than 1 if you wish.
.SP
\fBecho\fP extends the length of the signal by the maximum delay time.
.SP
For a flow diagram of how \fBecho\fR works,
say \fBsox_ng \-\-help\-effect echo\fR.
.SP
For example,
this makes it sound as if there are twice as many instruments as are
actually playing:
.XE
   play_ng lead.aiff echo 0.8 0.88 60 0.4
.XX
If the delay is very short, it sound like a metallic robot:
music:
.XE
   play_ng lead.aiff echo 0.8 0.88 6 0.4
.XX
A longer delay sounds like an open air concert in the mountains:
.XE
   play_ng lead.aiff echo 0.8 0.9 1000 0.3
.XX
One mountain more, and:
.XE
   play_ng lead.aiff echo 0.8 0.9 1000 0.3 1800 0.25
.XX
.TP
\fBechos \fIgain-in gain-out\fR <\fIdelay decay\fR>
.SP
Echos stands for `Echo in Sequel' and adds a sequence of echoes to the audio.
That is, the first echo takes the input,
the second the input and the first echo,
the third the input and the output of the second echo and so on.
A single \fBechos\fR has the same effect as a single \fBecho\fR.
Each
.I "delay decay"
pair gives the delay in milliseconds (with a minimum of one sample)
and the decay of that echo.
\fIGain-out\fR is a final volume multiplier applied to the sum of
the input \(mu \fIgain-in\fR and the delays' outputs \(mu
their respective decays.
.SP
\fBechos\fP extends the length of the signal by the maximum delay time.
.SP
For a flow diagram of how \fBechos\fR works,
say \fBsox_ng \-\-help\-effect echos\fR.
.SP
For example:
.SP
The sample is bounced twice in symmetric echos:
.XE
   play_ng lead.aiff echos 0.8 0.7 700 0.25 700 0.3
.XX
The sample is bounced twice in asymmetric echos:
.XE
   play_ng lead.aiff echos 0.8 0.7 700 0.25 900 0.3
.XX
The sample sounds as if it were played in a garage:
.XE
   play_ng lead.aiff echos 0.8 0.7 40 0.25 63 0.3
.XX
.TP
\fBequalizer \fIfrequency width\fR[\fBq\fR\^|\^\fBo\fR\^|\^\fBh\fR\^|\^\fBk\fR] \fIgain\fR
Apply a two-pole peaking equalization filter.
With this filter, the signal level at and around a selected frequency
can be increased or decreased while, unlike band-pass and band-reject
filters, the level at all other frequencies is unchanged.
.SP
\fIfrequency\fR gives the filter's central frequency in Hz,
\fIwidth\fR gives its bandwidth
and \fIgain\fR the required gain
or attenuation in dB.
Beware of
.B Clipping
when using a positive \fIgain\fR.
.SP
In order to produce complex equalization curves, this effect
can be given several times, each with a different central frequency.
.SP
The filter is described in detail in [1].
.SP
This effect supports the \fB\-\-plot\fR global option.
.TP
\fBfade\fR [\fItype\fR] \fIfade-in-length\fR [\fIstop-position(=)\fR [\fIfade-out-length\fR]]
Apply a fade effect to the beginning, end, or both of the audio.
.SP
An optional \fItype\fR can be specified to select the shape of the fade
curve:
\fBq\fR for quarter of a sine wave, \fBh\fR for half a sine
wave, \fBt\fR for linear (`triangular') slope, \fBl\fR for logarithmic,
and \fBp\fR for inverted parabola.  The default is logarithmic.
.SP
A fade-in starts from the first sample and ramps the signal level from 0
to full volume over the time given as \fIfade-in-length\fR.  Specify 0 if
no fade-in is wanted.
.SP
For a fade-out, the audio is truncated at
.I stop-position
and the signal level is ramped from full volume down to 0 over an
interval of \fIfade-out-length\fR before the \fIstop-position\fR.  If
.I fade-out-length
is not specified, it defaults to the same value as
\fIfade-in-length\fR.
No fade-out is performed if
.I stop-position
is not specified.
If the audio length can be determined from the input file header and any
previous effects, then `\-0' (or, for historical reasons, `0') may
be specified for
.I stop-position
to indicate the usual case of a fade out that ends at the end of the input
audio stream.
.SP
See the
.B splice
effect.
.TP
\fBfir\fR [\fIcoefs-file\fR\^|\^\fIcoefs\fR]
Use SoX's FFT convolution engine with given Finite Impulse Response filter
coefficients.
If a single argument is given, it is the name of a file
containing the filter coefficients (white space separated; may contain
`#' comments).  If the filename is `\-' or if no argument is
given, the coefficients are read from the `standard input' (stdin);
otherwise, coefficients may be given on the command line.
Examples:
.XE
   sox_ng in.au out.au fir .0195 \-.082 .234 .891 \-.145 .043

   sox_ng in.au out.au fir coefs.txt
.XX
.ne 6
with \f(CWcoefs.txt\fR containing
.XE
   # HP filter: freq=10000
     1.2311233052619888e\-01
    \-4.4777096106211783e\-01
     5.1031563346705155e\-01
    \-6.6502926320995331e\-02
.XX
This effect supports the \fB\-\-plot\fR global option.
.TP
\fBfirfit\fR [\fIknots-file\fR\^|\^<\fIfreq gain\fR>]
Use SoX's FFT convolution engine to make a filter whose frequency response
approximates a spline passing through a series of frequency/gain pairs.
If a single argument is given, it is the name of a file
containing the knots (white space separated; may contain
`#' comments).  If the given filename is `\-' or if no argument is
given, the knots are read from the `standard input' (stdin);
otherwise, knots may be given on the command line.
.SP
\fIGains\fR are in dB and the knot frequencies must be in increasing order.
.SP
Examples:
.XE
   sox_ng in.au out.au firfit 20 0 10000 -3
.XX
gives a gentle low-pass filter and
.XE
   sox_ng in.au out.au firfit knots.txt
.XX
with knots.txt containing
.XE
   # Approximate telephone response
   300  -100
   400   -10
   480     0
   2800    0
   3000  -10
   3400 -100
.XX
approximates the response of a carbon microphone telephone.
.SP
This effect supports the \fB\-\-plot\fR global option.
.TP
\fBflanger\fR [\fIdelay(0) \fR[\fIdepth\fR(2) [\fIregen\fR(0) [\fIwidth\fR(71) [\fIspeed\fR(0\*d5) [\fIshape(sine) \fR[\fIphase(25) \fR[\fIinterp(linear)\fR]]]]]]]]
Apply a flanging effect to the audio.
See [3] for a detailed description of flanging.
.SP
The parameters give the base delay and the added swept delay in milliseconds,
the percentage of regeneration (the delayed signal feedback),
\fIwidth\fR the percentage of delayed signal that is mixed with the original,
\fIspeed\fR the number of sweeps per second,
the shape of the swept wave (\fBsine\fR or \fBtriangle\fR),
the percentage of phase shift of the swept wave in multichannel flanges
(0 = 100 = the same phase on each channel) and
the type of digital delay line interpolation (\fBlinear\fR or \fBquadratic\fR).
.SP
The input and the delay's output are mixed and balanced so they
don't clip, so a \fIwidth\fR of 100 gives 50:50 mixing; to obtain only
the delayed output and none of the input, specify \fIwidth\fR as \fBinf\fR.
.SP
Despite containing a delay, \fBflanger\fR does not extend the length
of the signal so, if you also want the last dregs of the delayed output
and feedback, \fBpad\fR the signal beforehand.
.SP
For a flow diagram of how \fBflanger\fR works,
say \fBsox_ng \-\-help\-effect flanger\fR.
.DT
.SP
\fBsine\fR, \fBtriangle\fR, \fBlinear\fR and \fBquadratic\fR can be abbreviated.
.TP
\fBgain \fR[\fB\-e\fR\^|\^\fB\-B\fR\^|\^\fB\-b\fR\^|\^\fB\-r\fR] [\fB\-n\fR] [\fB\-l\fR\^|\^\fB\-h\fR] [\fIgain-dB\fR(0)]
Apply amplification or attenuation to the audio signal or, in some
cases, to some of its channels.
Note that use of any of
.BR \-e ,
.BR \-B ,
.BR \-b ,
.B \-r
and
.B \-n
requires temporary file space to store the audio to be processed, so may
be unsuitable for use with streamed audio.
.SP
Without other options,
.I gain-dB
adjusts the signal power level by the given number of dB:
positive amplifies (beware of clipping), negative attenuates.
With other options, the
.I gain-dB
amplification or attenuation is applied after the processing due to those options.
.SP
With the
.B \-e
option, the levels of the audio channels of a multichannel file are equalized,
i.e. gain is applied to all channels other than that with the highest peak
level so that all channels attain the same peak level
(but, without also giving
.BR \-n ,
the audio is not normalized).
.SP
The
.B \-B
(balance) option is similar to
.BR \-e ,
but with
.BR \-B,
the RMS level is used instead of the peak level.
.B \-B
might be used to correct stereo imbalance caused by an imperfect record
turntable cartridge.
Note that, unlike
.BR \-e ,
.B \-B
might cause some clipping.
.SP
.B \-b
is similar to
.B \-B
but has clipping protection, i.e. if necessary to prevent clipping
whilst balancing, attenuation is applied to all channels.
In conjunction with
.BR \-n ,
.B \-B
and
.B \-b
are synonymous.
.SP
The
.B \-r
option is used in conjunction with a prior invocation of
.B gain
with the
.B \-h
option\*msee below for details.
.SP
The
.B \-n
option normalizes the audio to 0dB FSD.
It is often used in conjunction with a negative
.I gain-dB
so that the audio is normalized to a given level below 0dB.
For example,
.XE
   sox_ng in.au out.au gain \-n
.XX
normalizes to 0dB, and
.XE
   sox_ng in.au out.au gain \-n \-3
.XX
normalizes to \-3dB.
.SP
The
.B \-l
option invokes a simple limiter. For example,
.XE
   sox_ng in.au out.au gain \-l 6
.XX
applies 6dB of gain but never clips.  Note that limiting more than a
few dBs more than occasionally in a piece of audio is not recommended
as it can cause audible distortion.
See the
.B compand
effect for a more capable limiter.
.SP
The
.B \-h
option is used to apply gain to provide headroom for subsequent
processing.  For example, with
.XE
   sox_ng in.au out.au gain \-h bass +6
.XX
6dB of attenuation is applied prior to the bass boosting effect,
ensuring that it does not clip.  Of course, with \fBbass\fR, it is
obvious how much headroom is needed but, with other effects (e.g.
rate, dither), it is not always as clear.  Another advantage of using
\fBgain \-h\fR rather than an explicit attenuation is that, if the
headroom is not used by subsequent effects, it can be reclaimed with
\fBgain \-r\fR, for example:
.XE
   sox_ng in.au out.au gain \-h bass +6 rate 44100 gain \-r
.XX
The above effects chain guarantees never to clip nor amplify;
it attenuates if necessary to prevent clipping, but by only as
much as is needed to do so.
.SP
Output formatting (dithering and bit-depth reduction) also requires
headroom which cannot be reclaimed, e.g.
.XE
   sox_ng in.au out.au gain \-h bass +6 rate 44100 gain \-rh dither
.XX
Here, the second
.B gain
invocation reclaims as much of the headroom as it can from the
preceding effects but retains as much headroom as is needed for
subsequent processing.
The SoX global option
.B \-G
can be given to automatically invoke \fBgain \-h\fR and \fBgain \-r\fR.
.SP
See the
.B norm
and
.B vol
effects.
.TP
\fBhighpass\fR\^|\^\fBlowpass\fR [\fB\-1\fR|\fB\-2\fR] \fIfrequency\fR [\fRwidth\fR[\fBq\fR\^|\^\fBo\fR\^|\^\fBh\fR\^|\^\fBk\fR]]
Apply a high-pass or low-pass filter with 3dB point \fIfrequency\fR.
The filter can be either single-pole (with
.BR \-1 ),
or double-pole (the default, or with
.BR \-2 ).
.I width
applies only to double-pole filters;
the default is Q = 0\*d707 and gives a Butterworth response.  The filters
roll off at 6dB per pole per octave (20dB per pole per decade).  The
double-pole filters are described in detail in [1].
.SP
These effects support the \fB\-\-plot\fR global option.
.SP
See \fBsinc\fR for filters with a steeper roll-off.
.TP
\fBhilbert\fR [\fB\-n \fItaps\fR]
Apply an odd-tap Hilbert transform filter, phase shifting the signal
by 90 degrees.
.SP
This is used in many matrix coding schemes and for analytic signal
generation.  The process is often written as a multiplication by \fIi\fR
(or \fIj\fR), the imaginary unit.
.SP
An odd-tap Hilbert transform filter has a band-pass characteristic,
attenuating the lowest and highest frequencies.  Its bandwidth can be
controlled by the number of filter taps, which can be specified with
\fB\-n\fR.  By default, the number of taps is chosen for a cutoff
frequency of about 75 Hz.
.SP
This effect supports the \fB\-\-plot\fR global option.
.TP
\fBladspa\fR [\fB-l\fR\^|\^\fB-r\fR] \fImodule\fR [\fIplugin\fR] [\fIargument\fR ...]
Apply a LADSPA [5] (Linux Audio Developer's Simple Plugin API) plugin.
Despite the name, LADSPA is not Linux-specific and a wide range of
effects is available as LADSPA plugins, such as cmt [6] (the Computer
Music Toolkit) and Steve Harris's plugin collection [7]. The first
argument is the plugin module, the second the name of the plugin (a
module can contain more than one plugin) and any other arguments are
for the control ports of the plugin. Missing arguments are supplied by
default values if possible.
.SP
Normally, the number of input ports of the plugin must match the number
of input channels and the number of output ports determines the output
channel count.  However, the
.B \-r
(replicate) option allows cloning a mono plugin to handle multichannel
input.
.SP
Some plugins introduce latency which SoX may optionally compensate for.
The
.B \-l
(latency compensation) option automatically compensates for latency
as reported by the plugin via an output control port named "latency".
.SP
If it is set, the environment variable \fBLADSPA_PATH\fP is used as
the search path for plugins.
.TP
\fBloudness\fR [\fIgain\fR [\fIreference\fR]]
Loudness control is similar to the
.B gain
effect but provides equalization for the human auditory system.  See
http://en.wikipedia.org/wiki/Loudness for a detailed description of
loudness.  The gain is adjusted by the given
.I gain
parameter (usually negative) and the signal equalized according to ISO
226 w.r.t. a reference level of 65dB, though an alternative
.I reference
level may be given if the original audio has been equalized at some
other level.
A default gain of \-10dB is used if a
.I gain
value is not given.
.SP
See the
.B gain
effect.
.TP
\fBlowpass\fR [\fB\-1\fR|\fB\-2\fR] \fIfrequency\fR [\fRwidth\fR[\fBq\fR\^|\^\fBo\fR\^|\^\fBh\fR\^|\^\fBk\fR]]
Apply a low-pass filter.
See the description of the \fBhighpass\fR effect for details.
.TP
\fBmcompand\fR \fB\(dq\fIcompand-args\fB\(dq\fR {\fIfrequency \fB\(dq\fIcompand-args\fB\(dq\fR}
.SP
The quoted \fIcompand-args\fR are as for the \fBcompand\fR effect:
.br
\fIattack1\fB,\fIdecay1\fR{\fB,\fIattack\fB,\fIdecay\fR}
.br
[\fIsoft-knee-dB\fB:\fR]\fIin-dB1\fR[\fB,\fIout-dB1\fR]{\fB,\fIin-dB\fB,\fIout-dB\fR}
.br
[\fIgain\fR [\fIinitial-volume-dB\fR [\fIdelay\fR]]]
.SP
The multi-band compander is similar to the single-band compander but the
audio is first divided into bands using Linkwitz-Riley crossover filters
and a separately specifiable compander is run on each band.  See the
\fBcompand\fR effect for the definition of its parameters.  Compand
parameters are specified between double quotes and the crossover
frequency for that band is given by \fIcrossover-freq\fR; these can be
repeated to create multiple bands.
.SP
The following examples approximate Dolby A compression and decompression,
as used for tape noise reduction in professional recording studios:
.XE
.ne 6
# Dolby A compressor
sox_ng in.au dolbyA.au mcompand \\
    ".1,.1 4:-56,-46,-36,-26,-26,-20,-17,-15,-9,-9" 80 \\
    ".1,.1 4:-56,-46,-36,-26,-26,-20,-17,-15,-9,-9" 3k \\
    ".1,.1 4:-56,-46,-36,-26,-26,-20,-17,-15,-9,-9" 9k \\
    ".1,.1 4:-56,-42,-36,-23,-26,-18,-17,-14,-9,-9"

.ne 6
# Dolby A decompressor
sox_ng dolbyA.au out.au mcompand \\
    ".1,.1 4:-46,-56,-26,-36,-20,-26,-15,-17,-9,-9" 80 \\
    ".1,.1 4:-46,-56,-26,-36,-20,-26,-15,-17,-9,-9" 3k \\
    ".1,.1 4:-46,-56,-26,-36,-20,-26,-15,-17,-9,-9" 9k \\
    ".1,.1 4:-42,-56,-23,-36,-18,-26,-14,-17,-9,-9"
.XX
Real Dolby A probably compands each channel separately
but that is left as an exercise to interested readers.
.SP
See
.B compand
for a single-band companding effect.
.TP
\fBnoiseprof\fR [\fIprofile-file\fR]
Calculate a profile of the audio for use in noise reduction.  See the
description of the \fBnoisered\fR effect for details.
.TP
\fBnoisered\fR [\fIprofile-file\fR [\fIamount\fR]]
Reduce noise in the audio signal by profiling and filtering.  This
effect is moderately effective at removing consistent background noise
such as hiss or hum.  To use it, first run SoX with the \fBnoiseprof\fR
effect on a section of audio that ideally would contain silence but in
fact contains noise\*msuch sections are typically found at the beginning
or the end of a recording.  \fBnoiseprof\fR writes a noise
profile to \fIprofile-file\fR or to stdout if no \fIprofile-file\fR or
if `\-' is given.  E.g.
.XE
   sox_ng speech.wav \-n trim 0 1.5 noiseprof speech.noise-profile
.XX
To actually remove the noise, run SoX again, this time with the \fBnoisered\fR
effect;
.B noisered
reduces noise according to a noise profile generated by
.BR noiseprof ,
from
.I profile-file
if it is given
or from stdin if no \fIprofile-file\fR or if `\-' is given.  E.g.
.XE
   sox_ng speech.wav cleaned.wav noisered speech.noise-profile 0.3
.XX
How much noise should be removed is specified by
.IR amount \*ma
number between 0 and 1 with a default of 0\*d5.  Higher numbers
remove more noise but present a greater likelihood of removing wanted
components of the audio signal.  Before replacing an original recording
with a noise-reduced version, experiment with different
.I amount
values to find the optimal one for your audio; use headphones to check
that you are happy with the results, paying particular attention to quieter
sections of the audio.
.SP
On most systems, the two stages\*mprofiling and reduction\*mcan be combined
using a pipe, e.g.
.XE
   sox_ng noisy.wav \-n trim 0 1 noiseprof | \e
       play_ng noisy.wav noisered
.XX
.TP
\fBnorm\fR [\fIdB-level\fR]
Normalize the audio.
.B norm
is just an alias for \fBgain \-n\fR; see the
.B gain
effect for details.
.TP
\fBoops\fR
Out Of Phase Stereo effect.
Mixes stereo to twin mono where each mono channel contains the
difference between the left and right stereo channels.
This is sometimes known as the `karaoke' effect as it often has the effect
of removing most or all of the vocals from a recording.
It is equivalent to \fBremix 1,2i 1,2i\fR.
.TP
\fBoverdrive\fR [\fIgain\fR(20) [\fIcolor\fR(20)]]
Non-linear distortion.
The \fIcolor\fR parameter controls the amount of even harmonic content
in the overdriven output. Both parameters range from 0 to 100.
.TP
\fBpad\fR { \fI[%]length\fR[\fB@\fIposition(=)\fR] }
Pad the audio with silence at the beginning, at the end or at any
specified points throughout the audio.
.I length
is the amount of silence to insert and
.I position
the position in the input audio stream at which to insert it.
Any number of lengths and positions may be specified, provided that
a specified position is not less that the previous one.
.I Position
is optional for the first and last lengths specified and
if omitted correspond to the beginning and the end of the audio respectively.
For example,
.B pad 1.5 1.5
adds 1\*d5 seconds of silence at each end of the audio, whilst
.B pad 4000s@3:00
inserts 4000 samples of silence 3 minutes into the audio.
If silence is wanted only at the end of the audio, either specify the end
position or specify a zero-length pad at the start.
.SP
If a pad specification starts with with a \fB%\fR sign, the output is padded
to a multiple of \fIlength\fR at the specified position. For example,
\fBpad 0 %10\fR adds silence at the end of the audio up to the next
multiple of 10 seconds.
.SP
See
.B delay
for an effect that can add silence at the beginning of
the audio on a channel-by-channel basis.
.TP
\fBphaser \fIgain-in gain-out delay decay speed\fR [\fB\-s\fR\^|\^\fB\-t\fR]
Add a phasing effect to the audio.
See [3] for a detailed description of phasing.
.SP
\fIdelay\fR gives the delay in milliseconds,
\fIdecay\fR the amount of feedback from the delay
and \fIspeed\fR the frequency of delay-time modulation wave in Hz.
.SP
The modulation is either sinusoidal (\fB\-s\fR), which is preferable
for multiple instruments, or triangular
(\fB\-t\fR) which gives single instruments a sharper phasing effect.
The decay should be less than 0\*d5 to avoid
feedback, and usually no less than 0\*d1.
\fIGain-out\fR is the volume of the output.
.SP
Technically, the SoX \fBphaser\fP is not a phaser; it is a flanger.
A flanger does comb filtering with equidistant spacing
(e.g. 100Hz, 200Hz, 300Hz, 400Hz, ...), while a phaser does
comb filtering with factored spacing
(e.g. 100Hz, 200Hz, 400Hz, 800Hz, ...) that sounds more harmonic.
SoX's \fBflanger\fP effect differs from this one in that
it has signal feedback for more dramatic effects and that
there can be a fixed modulation phase difference between
different channels.
.SP
For a flow diagram of how \fBphaser\fR works,
say \fBsox_ng \-\-help\-effect phaser\fR.
.SP
For example:
.XE
   play_ng snare.flac phaser 0.8 0.74 3 0.4 0.5 \-t
.XX
Gentler:
.XE
   play_ng snare.flac phaser 0.9 0.85 4 0.23 1.3 \-s
.XX
A popular sound:
.XE
   play_ng snare.flac phaser 0.89 0.85 1 0.24 2 \-t
.XX
More severe:
.XE
   play_ng snare.flac phaser 0.6 0.66 3 0.6 2 \-t
.XX
.TP
\fBpitch \fR[\fB\-q\fR] \fIshift\fR [\fIsegment\fR [\fIsearch\fR [\fIoverlap\fR]]]
Change the audio pitch but not the tempo.
.SP
.I shift
gives the pitch shift as positive or negative `cents' (i.e. 100ths of a
semitone).
.SP
.B Pitch
and
.B tempo
share the same fundamental algorithm; see the \fBtempo\fR
effect for a description of the other parameters.
.SP
See the \fBbend\fR, \fBspeed\fR and \fBtempo\fR effects.
.TP
\fBrate\fR [\fB\-q\fR\^|\^\fB\-l\fR\^|\^\fB\-m\fR\^|\^\fB\-h\fR\^|\^\fB\-v\fR] [override-options] \fIfrequency\fR]
Change the audio sampling rate (i.e. resample the audio) to any given
.I frequency
(even non-integer if this is supported by the output file format)
using a quality level defined as follows:
.ne 10
.\" cI cI9 cI2w6 cIw6 lIw17
.TS
center;
cI cI cI cI lxI
cB c c c lx.
\ 	Quality	T{
.na
B/W
T}	Rej dB	T{
.na
Typical Use
T}
\-q	T{
.na
quick
T}	n/a	T{
.na
\(~=30\^@\^Fs/4
T}	T{
.na
playback on ancient hardware
T}
\-l	low	80%	100	T{
.na
playback on old hardware
T}
\-m	medium	95%	100	T{
.na
audio playback
T}
\-h	high	95%	125	T{
.na
16-bit mastering (use with dither)
T}
\-v	T{
.na
very high
T}	95%	175	24-bit mastering
.TE
.DT
.SP
where
.I B/W
(bandwidth) is the percentage of the audio frequency band that is preserved and
.I Rej dB
is the level of noise rejection.  Increasing levels of resampling
quality come at the expense of increasing amounts of time to process the
audio.  If no quality option is given, the quality level used is `high'
when processing audio and `low' when playing it.
See \fBPlaying & Recording Audio\fR above.
.SP
The `quick' algorithm uses cubic interpolation; all others use
band-limited interpolation.  By default, all algorithms have
a linear phase response; for `medium', `high' and
`very high', the phase response is configurable (see below).
.SP
The
.B rate
effect is invoked automatically if SoX's \fB\-r\fR option specifies a
rate that is different to that of the input file(s).  Alternatively, if
this effect is given explicitly, then SoX's
.B \-r
option need not be given.  For example, the following two commands are
equivalent:
.XE
.ne 2
   sox_ng input.wav \-r 48k output.wav bass \-b 24
   sox_ng input.wav        output.wav bass \-b 24 rate 48k
.XX
though the second command is more flexible as it allows
.B rate
options to be given, and allows the effects to be ordered arbitrarily.
.SP
.B "Override Options"
.RS
The simple quality selection described above provides settings that
satisfy the needs of the vast majority of resampling tasks.
Occasionally, however, it may be desirable to fine-tune the resampler's
filter response; this can be achieved using the override options
in the following table:
.ne 6
.TS
center;
lB lx.
\-M/\-I/\-L	Phase response=minimum/intermediate/linear
\-s	Steep filter (bandwidth=99%)
\-a	Allow aliasing/imaging above the pass band
\-b\ \fIwidth\fR	Any bandwidth % (74\-99\*d7 or 85-99\*d7 with \B\-a\fR)
\-p\ \fIphase\fR	T{
.na
Any phase response (0=minimum, 25=intermediate, 50=linear, 100=maximum)
T}
.TE
.DT
.SP
These cannot be used with the `quick' or `low' algorithms.
.SP
All resamplers use filters that can sometimes create `echo' (a.k.a.
`ringing') artefacts with transient signals such as those that occur
with `finger snaps' or other highly percussive sounds.  Such artefacts are
much more noticeable to the human ear if they occur before the transient
(`pre-echo') than if they occur after it (`post-echo').  Note that the
frequency of any such artefacts is related to the smaller of the
original and new sampling rates but if this is at least 44\*d1kHz,
the artefacts will lie outside the range of human hearing.
.SP
A phase response setting may be used to control the distribution of any
transient echo between
`pre' and `post': with minimum phase, there is no pre-echo but the
longest post-echo; with linear phase, pre- and post-echo are in equal
amounts (in signal terms, but not in audibility); the intermediate
phase setting attempts to find the best compromise by selecting a small
length (and level) of pre-echo and a medium-length of post-echo.
.SP
A minimum, intermediate or linear phase response is selected using the
\fB\-M\fR, \fB\-I\fR and \fB\-L\fR options;
a custom phase response can be created with the
.B \-p
option.  Note that phase responses between `linear' and `maximum'
(greater than 50) are rarely useful.
.SP
A resampler's bandwidth setting determines how much of the frequency
content of the original signal (w.r.t. the original sample rate when
upsampling or the new sample rate when downsampling) is preserved
during conversion.  The term `pass band' is used to refer to all frequencies
up to the bandwidth point (e.g. for a 44\*d1kHz sampling rate and a
resampling bandwidth of 95%, the pass band represents frequencies from
0Hz (DC) to circa 21kHz).  Increasing the resampler's bandwidth
results in a slower conversion and can increase transient echo
artefacts (and vice versa).
.SP
The
.B \-s
`steep filter' option changes the resampling bandwidth from the default of 95%
(based on the 3dB point) to 99%.  The
.B \-b
option allows the bandwidth to be set to any value in the range
74\-99\*d7% but bandwidth values greater than 99% are not
recommended for normal use as they can cause excessive transient echo.
.SP
If the
.B \-a
option is given, aliasing/imaging above the pass band is allowed.  For
example, with 44\*d1kHz sampling rate and a
resampling bandwidth of 95%, this means that frequency content above
21kHz can be distorted. However, since this is above the pass band (i.e.
above the highest frequency of interest/audibility), this may not be a
problem.  The benefits of allowing aliasing/imaging are reduced processing time
and reduced (by almost half) transient echo artefacts.
.SP
Examples:
.XE
   sox_ng input.wav \-b 16 output.wav rate \-s \-a 44100 dither \-s
.XX
is default (high) quality resampling with overrides for a steep filter,
to allow aliasing, at a 44\*d1kHz sample rate and noise-shaped dithering
to a 16-bit WAV file.
.XE
   sox_ng input.wav \-b 24 output.aiff rate \-v \-I \-b 90 48k
.XX
is very high quality resampling with overrides for an intermediate phase,
a bandwidth of 90%, at a 48k sampling rate and storing the output
to a 24-bit AIFF file.
.RE
.TP
\fBremix\fR [\fB\-a\fR\^|\^\fB\-m\fR\^|\^\fB\-p\fR] <\fIout-spec\fR>
\fIout-spec\fR	= \fIin-spec\fR{\fB,\fIin-spec\fR} | \fB0\fR
.br
\fIin-spec\fR	= [\fIin-chan\fR]\^[\fB\-\fR[\fIin-chan2\fR]]\^[\fIvol-spec\fR]
.br
\fIvol-spec\fR	= \fBp\fR\^|\^\fBi\fR\^|\^\fBv\^\fR[\fIvolume\fR]
.br
.SP
Select and mix input audio channels into output audio channels.  Each output
channel is specified in turn by a given \fIout-spec\fR which is a list of
contributing input channels and volume specifications.
.SP
Note that this effect operates on the audio channels
within the SoX effects processing chain; it should not be confused with the
.B \-m
global option, where multiple files
are mix-combined before entering the effects chain.
.SP
An
.I out-spec
contains comma-separated input channel numbers and hyphen-delimited
channel number ranges; alternatively,
.B 0
may be given to create a silent output channel.  For example,
.XE
   sox_ng input.wav output.wav remix 6 7 8 0
.XX
creates an output file with four channels, where channels 1, 2, and 3 are
copies of channels 6, 7, and 8 in the input file, and channel 4 is silent.
Whereas
.XE
   sox_ng input.wav output.wav remix 1\-3,7 3
.XX
creates a (somewhat bizarre) stereo output file where the left channel
is a mix-down of input channels 1, 2, 3 and 7 and the right channel is
a copy of input channel 3.
.SP
Where a range of channels is specified, the channel numbers to the left and
right of the hyphen are optional and default to 1 and to the number of input
channels respectively. Thus
.XE
   sox_ng input.wav output.wav remix \-
.XX
performs a mix-down of all input channels to mono.
.SP
By default, where an output channel is mixed from multiple input
channels, each input channel is scaled by a factor of \(S1/\s-2n\s+2.
Custom mixing volumes can be set by following a given input channel or range
of input channels with a \fIvol-spec\fR (volume specification)
which is one of the letters \fBp\fR, \fBi\fR, or \fBv\fR,
followed by a volume number, the meaning of which depends on the given
letter:
.ne 7
.TS
center;
lI lI lxI
cb l lx.
Letter	Volume number	Notes
p	power adjust in dB	0 = no change
i	power adjust in dB	T{
.na
As for \fBp\fR but invert the audio
T}
v	voltage multiplier	T{
.na
1 = no change;
0\*d5\ \(~=\ 6dB\ attenuation;
2\ \(~=\ 6dB\ gain;
\-1\ =\ invert
T}
.TE
.DT
.SP
If an \fIout-spec\fR includes at least one \fIvol-spec\fR then, by default,
\(S1/\s-2n\s+2 scaling is not applied to any other channels in the
same \fIout-spec\fR (though maybe in other \fIout-spec\fRs) though
the \fB\-a\fR (automatic)
option can be given to retain the automatic scaling in this case.
For example,
.XE
   sox_ng input.wav output.wav remix 1,2 3,4v0.8
.XX
results in channel level multipliers of 0\*d5,0\*d5 and 1,0\*d8, whereas
.XE
   sox_ng input.wav output.wav remix \-a 1,2 3,4v0.8
.XX
results in channel level multipliers of 0\*d5,0\*d5 and 0\*d5,0\*d8.
.SP
The \fB\-m\fR (manual) option disables all automatic volume adjustments, so
.XE
   sox_ng input.wav output.wav remix \-m 1,2 3,4v0.8
.XX
results in channel level multipliers of 1,1 and 1,0\*d8.
.SP
The volume number is optional and omitting it corresponds to no volume
change; however, the only case in which this is useful is in conjunction
with
.BR i .
For example, if
.I input.wav
is stereo, then
.XE
   sox_ng input.wav output.wav remix 1,2i
.XX
is a mono equivalent of the
.B oops
effect.
.SP
If the \fB\-p\fR option is given, any automatic \(S1/\s-2n\s+2 scaling
is replaced by \(S1/\s-2\(srn\s+2 (`power') scaling; this gives a louder mix
but one that may occasionally clip.
.DT
.SP
One use of the
.B remix
effect is to split an audio file into a set of files, each containing
one of the constituent channels in order to perform subsequent
processing on individual audio channels.  When more than a few
channels are involved, a script such as the following is useful:
.ne 8
.XE
#! /bin/sh
chans=\`soxi_ng \-c "$1"\`
while [ $chans \-ge 1 ]; do
   chans0=\`printf %02i $chans\`   # 2 digits hence up to 99 chans
   out=\`echo "$1"|sed "s/\\(.*\\)\\.\\(.*\\)/\\1\-$chans0.\\2/"\`
   sox_ng "$1" "$out" remix $chans
   chans=\`expr $chans \- 1\`
done
.XX
If a file
.I input.wav
containing six audio channels were given, the script would produce six
output files:
.IR input-01.wav ,
\fIinput-02.wav\fR, ...,
.IR input-06.wav .
.SP
See the \fBswap\fR effect.
.TP
\fBrepeat\fR [\fIcount\fR(1)|\fB\-\fR]
Repeat the entire audio \fIcount\fR times, or once if \fIcount\fR is not given.
The special value \fB\-\fR requests infinite repetition.
It requires temporary file space to store the audio to be repeated.
Note that repeating once yields two copies: the original audio and the
repeated audio.
.TP
\fBreverb\fR [\fB\-w\fR] [\fIreverberance\fR(50%) [\fIHF-damping\fR(50%) [\fIroom-scale\fR(100%)
[\fIstereo-depth\fR(100%) [\fIpre-delay\fR(0ms) [\fIwet-gain\fR(0dB)]]]]]]
.SP
Add reverberation to the audio using the `freeverb' algorithm.  A
reverberation effect is sometimes desirable for concert halls that are too
small or contain so many people that the hall's natural reverberance is
diminished.  Applying a small amount of stereo reverb to a dry mono signal
usually makes it sound more natural.  See [3] for a detailed description
of reverberation.
.SP
This effect increases the volume of the audio and continues to reverberate
after the input finishes so, to prevent clipping and
keep the audible part of the final reverberation,
a typical invocation might be:
.XE
   play_ng dry.au gain \-3 pad 0 1 reverb
.XX
The
.B \-w
option can be given to select only the `wet' signal, thus allowing it to be
processed further, independently of the `dry' signal.  E.g.
.XE
   play_ng \-m in.au "|sox_ng in.au \-p reverse reverb \-w reverse"
.XX
for a reverse reverb effect.
.TP
\fBreverse\fR
Reverse the audio completely.
Requires temporary file space to store the audio to be reversed.
.TP
\fBriaa\fR
Apply RIAA vinyl playback equalization.
The sampling rate must be 44\*d1, 48, 88\*d2, 96 or 192kHz.
.SP
This effect supports the \fB\-\-plot\fR global option.
.TP
\fBsdm\fR [\fB\-f \fIfilter\fR] [\fB\-t \fIorder\fR] [\fB\-n \fInum\fR] [\fB-l \fIlatency\fR]
Apply a 1-bit sigma-delta modulator producing DSD output.  The input
should be previously upsampled, e.g. with the \fBrate\fR effect, to a
high rate, 2\*d8224MHz for DSD64.  The \fB\-f\fR option selects the
noise-shaping filter from the following list where the number indicates
the order of the filter:
.TS
centre;
l l.
clans-4	sdm-4
clans-5	sdm-5
clans-6	sdm-6
clans-7	sdm-7
clans-8	sdm-8
.TE
.DT
.TP
\ 
The noise filter may be combined with a partial trellis/viterbi search
by supplying the following options:
.RS
.IP "\fB\-t \fIorder\fR"
Trellis order, max 32.
.IP "\fB\-n \fInum\fR"
Number of paths to consider, max 32.
.IP "\fB\-l \fIlatency\fR"
Output latency, max 2048.
.RE
.TP
\ 
The result of using these parameters is hard to predict and can include
high noise levels or instability.  Caution is advised.
.TP
\fBsilence \fR[\fB\-l\fR] \fIabove-periods\fR [\fIduration threshold\fR[\fBd\fR\^|\^\fB%\fR]]
[\fIbelow-periods duration threshold\fR[\fBd\fR\^|\^\fB%\fR]]
.SP
Removes silence from the beginning, middle or end of the audio,
where `silence' is determined by a specified threshold.
.SP
The \fIabove-periods\fR value is used to indicate whether audio should be
trimmed at the beginning of the audio. A value of zero indicates that no
silence should be trimmed from the beginning in which case
\fIduration\fR and \fIthreshold\fR are omitted.
When a
non-zero \fIabove-periods\fR is specified,
you must also specify a \fIduration\fR and \fIthreshold\fR
and it trims audio until it finds non-silence.
It will normally be 1 when trimming silence from the beginning of the audio,
but it can be increased to higher values to trim all audio up to
the Nth non-silence period.
For example, if you have an audio file with two songs that
each contains 2 seconds of silence before the song, you could specify
an \fIabove-period\fR of 2 to strip out both silences and the first song.
.SP
\fIduration\fR indicates the
amount of time for which non-silence must be detected before it stops
trimming the silence before it.
By increasing \fIduration\fR, short bursts of quiet noise
can be treated as silence and trimmed off.
\fIduration\fR has the peculiarity that a bare
number is interpreted as a sample count, not as a number of seconds.
To specify seconds, either use the \fBt\fR suffix (as in \fB2t\fR),
a decimal point (as in \fB2.0\fR) or specify minutes too (as in \fB0:02\fR).
.SP
\fIthreshold\fR indicates the maximum sample value in any channel
is considered silence. For digital audio, a value of 0 may be fine but
for audio recorded from analog you may wish to increase the value
to include background noise.
\fIthreshold\fR numbers may be suffixed with
.B d
to indicate that the value is in decibels or
.B %
to indicate a percentage of the maximum possible sample value.
By default, it is in percent.
.SP
To trim silence from the end of the audio, specify
a \fIbelow-periods\fR count, which means
to remove all audio after the last onset of silence is detected.
Normally, this will be 1 but it can
be increased to leave shorter periods of silence
and the audio that follows them intact.
For example, if you have a track with 1 second of silence in the middle
and 1 second at the end, you could set \fIbelow-period\fR to 2
to leave the middle silence and what follows it
and remove from the final silence on.
.SP
When \fIbelow-periods\fR is given, its \fIduration\fR specifies
the length of silence that must exist before audio is not copied any more.
By specifying a higher \fIduration\fR, shorter silences that are wanted
can be left in the audio.
For example, if you have a song with 1 second of silence in the middle
and 2 seconds of silence at the end, a \fIduration\fR of 2
could be used to skip over the middle silence and trim the end
instead of starting trimming from half way through.
.SP
Unfortunately, the length of the silence at the end has to be longer
than any preceding silence for this to work
so you must know the length of the silence at the end.
.SP
A more reliable way to trim silence from the end is to use
the \fBsilence\fR effect in combination with the \fBreverse\fR effect.
By first reversing the audio, you can use the \fIabove-periods\fR
to trim from what looks like the front of the file,
then reverse it again to get back to normal.
.SP
To remove silence from the middle of a file,
give a negative \fIbelow-periods\fR.
This value is then treated as positive value and is also used to indicate that the
effect should restart processing as specified by the
\fIabove-periods\fR, making it suitable for removing periods of
silence in the middle of the audio.
.SP
The
.B \-l
option indicates that \fIbelow-periods\fR' \fIduration\fR of `silent' audio
should be left intact at the beginning of each period of silence,
for example, if you want to remove long pauses between words
but do not want to remove the pauses completely.
.SP
The following example shows how this effect can be used to make a recording
that does not contain the silence that usually occurs between
pressing the record button and the start of the performance:
.XE
   rec_ng \fIparameters filename other-effects\fR silence 1 5 2%
.XX
This example should remove the start of the recording until
there's a period of non-silence longer than 0.2s and louder than 0.1%,
then start searching for a silence that's longer than 1s and quieter than 3%
and remove it if found, leaving the first 1s of it in place,
then start copying again until a silence is found
that's longer than 1s and quieter than 3%, trim that to 1s and so on.
.XE
   sox_ng in.au out.au silence -l 1 0.2 0.1% -1 1.0 3%
.XX
.TP
\fBsinc\fR [\fB\-a\fI att\fR\^|\^\fB\-b\fI beta\fR] [\fB\-p\fI phase\fR\^|\^\fB\-M\fR\^|\^\fB\-I\fR\^|\^\fB\-L\fR] \:[\fB\-t\fI tbw\fR\^|\^\fB\-n\fI taps\fR]
[\fIfreqHP\fR]\:[\fB\-\fIfreqLP\fR [\fB\-t\fR tbw\^|\^\fB\-n\fR taps]] [\fB\-r\fR]]
.SP
Apply a kaiser-windowed low-pass, high-pass, band-pass or band-reject filter
to the signal.
The \fIfreqHP\fR and \fIfreqLP\fR parameters give the frequencies of the
6dB points of a high-pass and low-pass filter that may be invoked
individually or together.  If both are
given, \fIfreqHP\fR less than \fIfreqLP\fR creates a band-pass filter and
\fIfreqHP\fR greater than \fIfreqLP\fR creates a band-reject filter.
For example, the invocations
.XE
   sinc 3k
   sinc -4k
   sinc 3k-4k
   sinc 4k-3k
.XX
create a high-pass, low-pass, band-pass and band-reject filter
respectively.
.SP
The default stop-band attenuation of 120dB can be overridden with
\fB\-a\fR; alternatively, the kaiser window's `beta' parameter can be
given directly with \fB\-b\fR.
.SP
The default transition bandwidth of 5% of the total band can be
overridden with \fB\-t\fR (and \fItbw\fR in Hertz); alternatively, the
number of filter taps can be given directly with \fB\-n\fR and is
limited to the range of 11\-32767.
.SP
If both \fIfreqHP\fR and \fIfreqLP\fR are given, a \fB\-t\fR or
\fB\-n\fR option given to the left of the frequencies applies to both
frequencies; one of these options given to the right of the frequencies
applies only to \fIfreqLP\fR.
.SP
The
.BR \-p ,
.BR \-M ,
.B \-I
and
.B \-L
options control the filter's phase response; see the \fBrate\fR effect
for details.
.SP
The
.B \-r
option controls whether the filter should round the number of taps to the closest integer
instead of truncating it.
.SP
This effect supports the \fB\-\-plot\fR global option.
.TP
\fBsoftvol\fR [\fIvolume\fR(1.0) [\fIdouble-time\fR(0) [\fIheadroom\fR(0)]]]
The soft volume effect applies a simple multiplier to the audio
ensuring that it does not clip. When a sample would have clipped
the volume multiplier is automatically reduced to compensate.
.SP
It is a simple compander with the advantages of being very fast
and having no pre- or post-echo and reacts so fast that its volume-reduction
glitches don't add audible noise.
.SP
\fIvolume\fR sets the initial volume multiplier;
the default of 1.0 means no change.
.SP
\fIdouble-time\fR says that the volume should slowly increase at a rate
that makes it double every \fIdouble-time\fR seconds.
A good value for usual music is 10 and the default value of 0
says that the volume should not increase automatically.
.SP
\fIheadroom\fR is in dB and limits the loudest amplitude to
less than the 32-bit maximum.
This may be necessary when the final bit-depth reduction and/or dithering
make it clip.
A value of 0.1 is sufficient to protect down to a bit-depth of 8 with dithering.
.SP
When playing sound in interactive mode, the `\fBv\fR' and `\fBV\fR' keys
reduce and increase the volume if there is a \fBsoftvol\fR
in the effects chain. If there are more than one, which one it adjusts
is probably random.
.TP
\fBspectrogram \fR[\fIoptions\fR]
Create a spectrogram of the audio. The audio is passed unmodified
through the SoX processing chain.  This effect is optional\*mtype
\fBsox_ng \-\-help\fR and check the list of supported effects to see if
it has been included.
.SP
The spectrogram is rendered in a Portable Network Graphic (PNG) file
and shows time in the X axis, frequency in the Y axis and audio
signal magnitude in the Z axis, represented by the
color (or optionally the intensity) of the pixels in the X-Y plane.
If the audio signal contains multiple channels, these are shown
from top to bottom starting from channel 1, which is the left channel
for stereo audio.
.SP
For example, if `my.wav' is a stereo file, then
.XE
   sox_ng my.wav \-n spectrogram
.XX
creates a spectrogram of the entire file in the file
`spectrogram.png'.  More often though, analysis of a smaller portion
of the audio is required; e.g. with
.XE
   sox_ng my.wav \-n remix 2 trim 20 30 spectrogram
.XX
the spectrogram shows information only from the second (right)
channel of thirty seconds of audio starting from twenty seconds
in.  To analyze a small portion of the frequency domain, the
.B rate
effect may be used, e.g.
.XE
   sox_ng my.wav \-n rate 6k spectrogram
.XX
allows detailed analysis of frequencies up to 3kHz (half the sampling
rate) i.e. where the human auditory system is most sensitive.
See also the \fR\-R\fR option below. With
.XE
   sox_ng my.wav \-n trim 0 10 spectrogram \-x 600 \-y 200 \-z 100
.XX
the given options control the size of the spectrogram's X, Y & Z axes
(in this case, the spectrogram area of the produced image will be 600
by 200 pixels in size and the Z axis range will be 100 dB).  Note that
the produced image includes axes legends etc. and so will be a little
larger than the specified spectrogram size unless the \fB\-r\fR option
is given.  In this example
.XE
   sox_ng \-n \-n synth 6 tri 10k:14k spectrogram \-z 100 \-w kaiser
.XX
an analysis window with high dynamic range is selected to best
display the spectrogram of a swept triangular wave.  For a similar
example, append the following to the `chime' command in the
description of the
.B delay
effect (above):
.XE
   rate 2k spectrogram \-X 200 \-Z \-10 \-w kaiser
.XX
Options are also available to control the appearance (color set,
brightness, contrast etc.) and filename of the spectrogram; e.g. with
.XE
   sox_ng my.wav \-n spectrogram \-m \-l \-o print.png
.XX
a spectrogram is created suitable for printing on a black and white
printer.
.SP
.B Options
.RS
.IP \fB\-x\ \fInum\fR
Change the (maximum) width (X axis) of the spectrogram from its default
value of 800 pixels to a given number between 100 and a million.
See \fB\-X\fR and \fB\-d\fR.
.IP \fB\-X\ \fInum\fR
X axis pixels per second; the default is auto-calculated to fit the
audio to the X axis size if its duration is known or given with \fR\-d\fR,
or 100 otherwise.
If given in conjunction with \fB\-d\fR, this option affects the width of
the spectrogram; otherwise, it affects the duration of the
spectrogram.
.I num
can be from 1 (low time resolution) to 5000 (high time resolution)
and need not be an integer.  SoX
may make a slight adjustment to the given number for processing
quantization reasons; if so, SoX reports the actual number used
(viewable when the SoX global option
.B \-V
is in effect).
.IP \fB\-y\ \fInum\fR
Sets the size of the Y axis per channel in pixels; this is the number of
frequency `bins' used in the Fourier analysis that produces the spectrogram.
By default the Y axis size is chosen automatically, depending on the number of
channels.  See
.B \-Y
for an alternative way of setting the spectrogram height.
.IP \fB\-Y\ \fInum\fR
Sets the target total height of the spectrogram(s).  The default value
is 550 pixels and the maximum is a million.
Using this option, and by default, SoX chooses a
height for individual spectrogram channels that is one more than a
power of two, so the actual total height may fall short of the given
number or be larger.
However, there is also a minimum height of 64 per channel so if
there are many channels, the number may be exceeded.
See
.B \-y
for alternative way of setting spectrogram height.
.IP \fB\-z\ \fInum\fR
Z axis (color) range in dB, default 120.  This sets the dynamic range
of the spectrogram to be \-\fInum\fR\ dBFS to 0\ dBFS.
.I Num
may range from 20 to 180.  Decreasing dynamic range effectively
increases the contrast of the spectrogram display and vice versa.
.IP \fB\-Z\ \fInum\fR
Sets the upper limit of the Z axis in dBFS.
A negative
.I num
effectively increases the brightness of the spectrogram display
and vice versa.
.IP \fB\-n\fR
Normalizes the upper limit of the Z axis so that the loudest pixels
are shown using the brightest color in the palette\*ma kind of
automatic \fB\-Z\fR flag.
.IP \fB\-q\ \fInum\fR
Sets the Z axis quantization, i.e. the number of different colors (or
intensities) in which to render Z axis
values.  A small number (e.g. 4) gives a poster-like effect making
it easier to discern magnitude bands of similar level and
results in a smaller PNG file.  The number given specifies the number of
colors to use in the Z axis range; two colors are reserved to
represent out-of-range values.
.IP \fB\-w\ \fIname\fR
Select a window function: \fBHann\fR (the default), \fBHamming\fR, \fBBartlett\fR, \fBRectangular\fR, \fBKaiser\fR or \fBDolph\fR.
The spectrogram is produced using the Discrete Fourier Transform (DFT)
algorithm and a significant parameter of this algorithm is the choice of
window function.  By default, SoX uses the Hann window, which has good
all-round properties for frequency resolution and dynamic range.  For better
frequency resolution but lower dynamic range, select a Hamming window;
for higher dynamic range but poorer frequency resolution, select a
Dolph window.
.IP \fB\-W\ \fInum\fR
Window adjustment parameter.  This can be used to make small
adjustments to the Kaiser and Dolph windows.  A positive number (up to
ten) increases its dynamic range, a negative number decreases it.
.IP \fB\-s\fR
Allow slack overlapping of DFT windows.
This can, in some cases, increase image sharpness and give greater adherence
to the
.B \-x
value but at the expense of a little spectral loss.
.IP \fB\-m\fR
Creates a monochrome spectrogram (the default is color).
.IP \fB\-h\fR
Selects a high-color palette which is less visually pleasing than the default
color palette but it may make it easier to differentiate different levels.
If this option is used in conjunction with
.BR \-m ,
the result is hybrid monochrome/color palette.
.IP \fB\-p\ \fInum\fR
Permute the colors in a color or hybrid palette.
The
.I num
parameter, from 1 (the default) to 6, selects the permutation.
.IP \fB\-l\fR
Creates a `printer-friendly' spectrogram with a light background (the
default has a dark background).
.IP \fB\-a\fR
Suppress the display of the axis lines.  This is sometimes useful in
helping to discern artefacts at the spectrogram edges.
.IP \fB\-r\fR
Raw spectrogram: suppress the display of axes and legends.
.IP \fB\-A\fR
Selects an alternative, fixed color-set.  This is provided only for
compatibility with spectrograms produced by another package.  It should
not normally be used as it has some problems, not least, a lack of
differentiation at the bottom end which results in masking of low-level
artefacts.
.IP \fB\-t\ \fItext\fR
Set the image title, the text to display above the spectrogram.
If you need it to be `chorus' or some other effect's name,
surround it by spaces inside double quotes.
.IP \fB\-c\ \fItext\fR
Set (or clear) the image comment, the text to display below and to the
left of the spectrogram.
.IP \fB\-o\ \fIfile\fR
The name of the spectrogram output PNG file, default `spectrogram.png'.
If `-' is given, the spectrogram is sent to the `standard output'
(stdout).
.IP \fB\-L\fR
Plot the frequency on a logarithmic axis.
.IP \fB\-R\ \fIL\fR:\fIH\fR
Specify the frequency range (from \fIL\fR to \fIH\fR).
The frequencies can have an optional suffix
'k' (\(mu1000) or 'M' (\(mu1000000), e.g. with
.XE
   sox_ng mymusic.mp3 \-n spectrogram \-L \-R 100:8k
.XX
By default, the lowest frequency is 0Hz for a linear graph or
1Hz for a logarithmic graph and the highest is the Nyquist frequency.
.RE
.TP
\ 
.B Advanced Options
.br
In order to process a smaller section of audio without affecting other
effects or the output signal (unlike when the
.B trim
effect is used), the following options may be used:
.RS
.IP \fB\-d\ \fIduration\fR
This option sets the X axis resolution such that audio with the given
.I duration
(a time specification) fits the selected (or default) X axis width.  For
example,
.XE
   sox_ng input.mp3 output.wav \-n spectrogram \-d 1:00 stats
.XX
creates a spectrogram showing the first minute of the audio, while
the
.B stats
effect is applied to the entire audio signal.
.SP
See
.B \-X
for an alternative way of setting the X axis resolution.
.IP \fB\-S\ \fIposition(=)\fR
Start the spectrogram at the given point in the audio stream.  For
example
.XE
   sox_ng input.aiff output.wav spectrogram \-S 1:00
.XX
creates a spectrogram showing all but the first minute of the audio
(the output file, however, receives the entire audio stream).
.RE
.TP
\ 
For the ability to perform off-line processing of spectral data, see
.BR "stat \-freq".
.TP
\fBspeed \fIfactor\fR[\fBc\fR]
Adjust the audio speed (pitch and tempo together).  \fIfactor\fR
is either the ratio of the new speed to the old speed (greater
than 1 speeds it up, less than 1 slows it down) or, if the
letter
\fBc\fR is appended, it's the number of cents (100ths of a semitone)
by which the pitch (and tempo) should be adjusted: greater than 0
increases, less than 0 decreases.
.SP
Technically, the speed effect only changes the sample rate information,
leaving the samples themselves untouched. The \fBrate\fR effect is invoked
automatically to resample to the output sample rate, using its default
quality/speed.  For higher quality or higher speed
resampling, in addition to the \fBspeed\fR effect, specify
the \fBrate\fR effect with the desired quality option.
.SP
See the \fBbend\fR, \fBpitch\fR
and
.B tempo
effects.
.TP
\fBspeexdsp \fR[\fB\-agc\fR [\fItarget_level\fR(100)]] [\fB\-denoise\fR [\fImax_db\fR(15)]] [\fB\-dereverb\fR]
[\fB\-fps\fR \fIframes_per_second\fR(20)] [\fB\-spf\fR \fIsamples_per_frame\fR]
.SP
Use the Speex DSP library to improve perceived sound quality.
.SP
If no options are specified, the \fB\-agc\fR and \fB\-denoise\fR features are enabled.
.RS
.IP \fB\-agc\ \fR[\fItarget_level\fR]
Enable automatic gain control and optionally specify
a target volume level from 1 to 100.
.IP \fB\-denoise\ \fR[\fImax_db\fR]
Enable noise reduction and optionally specify the maximum attenuation.
.IP \fB\-dereverb\fR
Enable reverb reduction.
.IP \fB\-fps\ \fIframes_per_second\fR
Specify the number of frames per second from 1-100.
.IP \fB\-spf\ \fIsamples_per_frame\fR
Specify the number of samples per frame.
The default is derived from the \fB\-fps\fR setting
so that frames abut but do not overlap.
.RE
.TP
\fBsplice \fR [\fB\-h\fR\^|\^\fB\-t\fR\^|\^\fB\-q\fR] {\fIposition(=)\fR[\fB,\fIexcess\fR[\fB,\fIleeway\fR]]}
Splice audio sections together.  This effect provides two things over
simple audio concatenation: a (usually short) cross-fade is applied at
the join and a wave similarity comparison is made to help determine the
best place at which to make the join.
.SP
One of the options
.BR \-h ,
.BR \-t ,
or
.B \-q
may be given to select the fade envelope as half cosine wave (the default),
triangular (a.k.a. linear), or quarter cosine wave (e.g. for a cross-fade of
correlated audio).
.ne 4
.TS
center;
cI lI lI lI
cB l l l.
\ 	Audio	Fade level	Transitions
\-h	correlated	constant gain	smooth
\-t	correlated	constant gain	abrupt
\-q	uncorrelated	constant power	smooth
.TE
.DT
.SP
To perform a splice, first use the
.B trim
effect to select the audio sections to be joined together.  As when
performing a tape splice, the end of the section to be spliced onto
should be trimmed with a small
.I excess
(default 0\*d005 seconds) after the ideal joining point.  The
beginning of the audio section to splice on should be trimmed with the
same
.IR excess
before the ideal joining point plus an additional
.I leeway
(default 0\*d005 seconds).
SoX should then be invoked with the two
audio sections as input files and the
.B splice
effect given with the position at which to perform the splice\*mthis is
length of the first audio section (including the excess).
.SP
The following diagram uses the tape analogy to illustrate the splice
operation.  The effect simulates the diagonal cuts and joins the two pieces:
.ne 14
.XE
      length1   excess
    -----------><--->
    _________   :   :  _________________
             \\  :   : :\\     `
              \\ :   : : \\     `
               \\:   : :  \\     `
                *   : :   * - - *
                 \\  : :   :\\     `
                  \\ : :   : \\     `
    _______________\\: :   :  \\_____`____
                      :   :   :     :
                      <--->   <----->
                      excess  leeway
.XX
where * indicates the joining points.
.SP
For example, a long song begins with two verses which start (as
determined e.g. by using the
.B play_ng
command with the
.B trim
(\fIstart\fR) effect) at times 0:30\*d125 and 1:03\*d432.
The following commands cut out the first verse:
.XE
   sox_ng too-long.wav part1.wav trim 0 30.130
.XX
(5 ms excess, after the first verse starts)
.XE
   sox_ng too-long.wav part2.wav trim 1:03.422
.XX
(5 ms excess plus 5 ms leeway, before the second verse starts)
.XE
   sox_ng part1.wav part2.wav just-right.wav splice 30.130
.XX
For another example, the SoX command
.XE
   play_ng "|sox_ng \-n \-p synth 1 sin %1" "|sox_ng \-n \-p synth 1 sin %3"
.XX
generates and plays two notes, but there is a nasty click at the
transition; the click can be removed by splicing instead of
concatenating the audio, i.e. by appending \fBsplice 1\fR to the
command. Clicks at the beginning and end of the audio can be removed by
\fIpreceding\fR the splice effect with \fBfade q .01 2 .01\fR.
.SP
Provided your arithmetic is good enough, multiple splices can be
performed with a single
.B splice
invocation.  For example, with a Bourne shell script `acpo':
.XE
#! /bin/sh
# Audio Copy and Paste Over
# acpo infile copy-start copy-stop paste-over-start outfile
# No chained time specifications allowed for the parameters
# (i.e. such that contain +/\-).
e=0.005                      # Using default excess
l=$e                         # and leeway.
sox_ng "$1" piece.wav trim $2\-$e\-$l =$3+$e
sox_ng "$1" part1.wav trim 0 $4+$e
sox_ng "$1" part2.wav trim $4+$3\-$2\-$e\-$l
sox_ng part1.wav piece.wav part2.wav "$5" \\
   splice $4+$e +$3\-$2+$e+$l+$e
.XX
two splices are used to `copy and paste' audio.
.SP
It is also possible to use this effect to perform general cross-fades,
e.g. to join two songs.  In this case,
.I excess
would typically be a number of seconds, the
.B \-q
option would typically be given to select an `equal power' cross-fade and
.I leeway
should be zero (which is the default if
.B \-q
is given).  For example, if f1.wav and f2.wav are audio files
to be cross-faded, then
.XE
   sox_ng f1.wav f2.wav out.wav splice \-q $(soxi_ng \-D f1.wav),3
.XX
cross-fades the files where the point of equal loudness is 3 seconds
before the end of f1.wav, i.e. the total length of the cross-fade is
2 \(mu 3 = 6 seconds (\f(CW$(...)\fR is POSIX shell notation that is replaced
by the output of the enclosed command).
.TP
\fBstat\fR [\fB\-s \fIscale\fR] [\fB\-rms\fR] [\fB\-freq\fR] [\fB\-v\fR] [\fB\-d\fR]
Display time and frequency domain statistical information about the audio.
Audio is passed unmodified through the SoX processing chain.
.SP
The information is output to the `standard error' (stderr) stream and is
calculated (where
.I n
is the duration of the audio in samples,
.I c
is the number of audio channels,
.I r
is the audio sample rate and
.I x\s-2\dk\u\s0
represents the value (in the range \-1 to +1) of each successive
sample in the audio),
as follows:
.TS
center;
lI lx.
Samples read	\fIn\fR\^\(mu\^\fIc\fR
Length (seconds)	\fIn\fR\^\(di\^\fIr\fR
Scaled by	See \fB\-s\fR below.
Maximum amplitude	T{
max(\fIx\s-2\dk\u\s0\fR)
The maximum sample value in the audio; usually this will be a positive number.
T}
Minimum amplitude	T{
min(\fIx\s-2\dk\u\s0\fR)
The minimum sample value in the audio; usually this will be a negative number.
T}
Midline amplitude	\(12\^min(\fIx\s-2\dk\u\s0\fR)\^+\^\(12\^max(\fIx\s-2\dk\u\s0\fR)
Mean norm	T{
\(S1/\s-2n\s+2\^\(*S\^\^\(br\^\fIx\s-2\dk\u\s0\fR\^\(br\^
The average of the absolute value of each sample in the audio.
T}
Mean amplitude	T{
\(S1/\s-2n\s+2\^\(*S\^\fIx\s-2\dk\u\s0\fR
The average of each sample in the audio.
If this figure is non-zero, then it indicates the
presence of a D.C. offset which could be removed using the
\fBdcshift\fR effect.
T}
RMS amplitude	T{
\(sr(\(S1/\s-2n\s+2\^\(*S\^\fIx\s-2\dk\u\s0\fR\(S2)
The level of a D.C. signal that would have the same power
as the audio's average power.
T}
Maximum delta	max(\^\(br\^\fIx\s-2\dk\u\s0\fR\^\-\^\fIx\s-2\dk\-1\u\s0\fR\^\(br\^)
Minimum delta	min(\^\(br\^\fIx\s-2\dk\u\s0\fR\^\-\^\fIx\s-2\dk\-1\u\s0\fR\^\(br\^)
Mean delta	\(S1/\s-2n\-1\s+2\^\(*S\^\^\(br\^\fIx\s-2\dk\u\s0\fR\^\-\^\fIx\s-2\dk\-1\u\s0\fR\^\(br\^
RMS delta	\(sr(\(S1/\s-2n\-1\s+2\^\(*S\^(\fIx\s-2\dk\u\s0\fR\^\-\^\fIx\s-2\dk\-1\u\s0\fR)\(S2)
Rough frequency	In Hz.
Volume Adjustment	T{
The parameter to the \fBvol\fR
effect which would make the audio as loud as possible without clipping.
Note: See the discussion on \fBClipping\fR
above for reasons why it is rarely a good idea actually to do this.
T}
.TE
.DT
.SP
Note that the delta measurements are not applicable to multichannel audio.
.SP
The
.B \-s
option can be used to scale the input data by a given factor.
The default value of
.I scale
is 2147483647 (i.e. the maximum value of a 32-bit signed integer).
Internal effects
always work with signed long PCM data and so the value should relate to this
fact.
.SP
The
.B \-rms
option converts all average values to `root mean square'
format.
.SP
The
.B \-v
option displays only the `Volume Adjustment' value.
.SP
The
.B \-freq
option outputs the input's power spectrum (a 4096-point DFT) instead of the
statistics listed above.  This should only be used with a single-channel
audio file.
.SP
The
.B \-d
option
displays a hex dump of the 32-bit signed PCM data
audio in SoX's internal buffer.
This is mainly used to help track down endian problems that
sometimes occur in cross-platform versions of SoX.
.SP
The
.B \-a
option
outputs the average power spectrum instead of
the power spectrum for each 4096-point DFT.
.SP
See the
.B stats
effect.
.TP
\fBstats\fR [\fB\-b \fIbits\fR\^|\^\fB\-x \fIbits\fR\^|\^\fB\-s \fIscale\fR] [\fB\-w \fIwindow-time\fR]
Display time domain statistical information about the audio channels;
audio is passed unmodified through the SoX processing chain.
Statistics are calculated and displayed for each audio channel and,
where applicable, an overall figure is also given.
.SP
For example, for a typical well-mastered stereo music file:
.XE
                     Overall     Left      Right
        DC offset   0.000803 \-0.000391  0.000803
        Min level  \-0.750977 \-0.750977 \-0.653412
        Max level   0.708801  0.708801  0.653534
        Pk lev dB      \-2.49     \-2.49     \-3.69
        RMS lev dB    \-19.41    \-19.13    \-19.71
        RMS Pk dB     \-13.82    \-13.82    \-14.38
        RMS Tr dB     \-85.25    \-85.25    \-82.66
        Crest factor       \-      6.79      6.32
        Flat factor     0.00      0.00      0.00
        Pk count           2         2         2
        Bit-depth      16/16     16/16     16/16
        Num samples    7.72M
        Length s     174.973
        Scale max   1.000000
        Window s       0.050
.XX
.IR DC\ offset ,
.IR Min\ level ,
and
.I Max\ level
are shown, by default, in the range \(+-1.
If the
.B \-b
(bits) options is given, these three measurements are scaled to a signed integer
with the given number of bits from 2 to 32.
For example, for 16 bits, the scale would be \-32768 to +32767.
The
.B \-x
option behaves the same way as
.B \-b
except that the signed integer values are displayed in hexadecimal.
The
.B \-s
option scales the three measurements by a given floating point number.
.SP
.I Pk\ lev\ dB
and
.I RMS\ lev\ dB
are the standard peak and RMS levels measured in dBFS.
.I RMS\ Pk\ dB
and
.I RMS\ Tr\ dB
are peak and trough values of the RMS level measured over a short window
(default: 50ms).
That can be changed with the \fB\-w\fP option in seconds from 0.01 to 10.
.SP
.I Crest\ factor
is the ratio of peak to RMS level (note: not in dB).
.SP
.I Flat\ factor
is a measure of the flatness (i.e. consecutive samples with the same value) of the signal at
its peak levels (i.e. either
.I Min\ level
or
.IR Max\ level ).
.SP
.I Pk\ count
is the number of occasions (not the number of samples) that the signal attained either
.IR Min\ level ,
or
.IR Max\ level .
The primary goal of the Peak Count value is to answer the question
"has this audio been clipped?", quite possibly as a result of the
frowned-upon-by-some but common practice of 'brick wall limiting'
in modern mastering. The closer the "Peak Count" is to 1,
the higher the confidence that the audio has not been clipped.
.SP
The right-hand
.I Bit-depth
figure is the standard definition of bit-depth, i.e. that all bits other than
this number of the most significant bits are always zero.
The left-hand figure is the number of bits at the least significant end
of those most significant bits that would be sufficient
to represent all sample values accurately (including the sign bit).
.SP
In mathematical terms, the right-hand figure is the ordinal,
counting from the most significant bit,
of the least significant bit that is set to one in at least one sample.
The left-hand figure is the ordinal,
counting from the least significant repeated sign bit across all samples,
of the least significant bit that is set to one in at least one sample.
.SP
Bit-depths are not intended to be properties of the signal per se
but properties of its 2's-complement PCM encoding.
.SP
The primary use case of bit-depth measurement concerns manipulation of
PCM audio by simple bit shifting, to answer questions such as:
"Is it likely that this 24-bit PCM file was created
by simply converting a 16-bit PCM file to 24-bit?" or
"Can I losslessly shift all the samples in this PCM audio file
m-bits left or n-bits right?"
.SP
For multichannel audio, an overall figure for each of the above
measurements is given and derived from the channel figures as follows:
.IR DC\ offset :
maximum magnitude;
.IR Max\ level ,
.IR Pk\ lev\ dB ,
.IR RMS\ Pk\ dB ,
.IR Bit-depth :
maximum;
.IR Min\ level ,
.IR RMS\ Tr\ dB :
minimum;
.IR RMS\ lev\ dB ,
.IR Flat\ factor ,
.IR Pk\ count :
average;
.IR Crest\ factor :
not applicable.
.SP
.I Length\ s
is the duration in seconds of the audio and, unlike \fBstat\fP,
.I Num\ samples
is equal to the sample rate multiplied by
.IR Length .
.I Scale\ max
is the scaling applied to the first three measurements;
specifically, it is the maximum value that could apply to
.IR Max\ level .
.I Window\ s
is the length of the window used for the peak and trough RMS measurements.
.SP
See the
.B stat
effect.
.TP
\fBstretch [\fIfactor\fR [\fIwindow \fR[\fIfade \fR[\fIshift \fR[\fIfading\fR]]]]]
Change the audio duration but not its pitch by cross-fading between
short windows of samples.
This effect is broadly equivalent to the
.B tempo
effect with \fIfactor\fR inverted and
.I search
set to zero so, in general, its results are comparatively poor;
it is retained as it can sometimes outperform
.B tempo
for small
.IR factor s.
.SP
.I factor
determines the change in length: >1 lengthens and <1 shortens.
By default, it is 1 (no change)
.SP
.I window
is the length of the crossfading window in milliseconds with a default of 20.
.SP
The
.I fade
option can only be \fBl\fR for \fBlinear\fR.
.SP
The
.I shift
ratio can be from 0 to 1 and its default depends on the stretch factor.
Its default is 1 when speeding up, 0\*d8 when slowing down.
.SP
The
.I fading
ratio, from 0 to 0\*d5, seems to be how much of each window is cross-faded
with the adjacent ones.
The default value depends on \fI\A\fRfactor and \fIshift\fR.
.SP
The duration of \fBstretch\fR's output is slightly longer than
the duration of the input multiplied by \fIfactor\fR as it has to empty
the delay line it uses;
\fBtempo\fR is more precise.
.TP
\fBswap\fR
Swap stereo channels.  If the input is not stereo, pairs of channels are
swapped and a possible odd last channel is passed through.  E.g., for seven
channels, the output order will be 2, 1, 4, 3, 6, 5, 7.
.SP
See
.B remix
for an effect that allows arbitrary channel selection, ordering and mixing.
.TP
.nh
.na
\fBsynth\fR [\fB\-j \fIkey\fR] [\fB\-n\fR] [\fIlength\fR [\fIoffset\fR [\fIphase\fR [\fIp1\fR [\fIp2\fR [\fIp3\fR]]]]]]
{\fItype\fR [\fIcombine\fR [\fIfixed\fR[\fB,\fIextra\fR[\fB,\fImix\fR]]]] \:[\fIfreq\fR[\fB:\fR\^|\^\fB+\fR\^|\^\fB/\fR\^|\^\fB\-\fIfreq2\fR]] [\fIoffset\fR [\fIphase\fR [\fIp1\fR [\fIp2\fR [\fIp3\fR]]]]]}
.ad
.hy
.SP
\fBsynth\fR generates fixed or swept frequency audio tones
with various wave shapes and wide-band noise of various colors.
Multiple synth effects can be cascaded to produce more complex
waveforms and at each stage it is possible to choose whether the generated
waveform is mixed with or modulated onto the output of the previous stage, and
the audio for each channel in a multichannel audio file can be synthesized
independently.
.SP
It generates audio at maximum volume (0dBFS), which means that there
is a high chance of clipping so,
in many cases, you will want to follow it with the \fBgain\fR
effect to prevent this from happening. (See
.B Clipping
above.)
.SP
Though this effect is used to generate audio, an input file must still
be given, the characteristics of which are used to set the
synthesized audio length, the number of channels and the sampling rate.
However, since the input file's audio is not normally needed, a `null
file' (with the special input filename \fB\-n\fR) is often given instead
and the length specified as a parameter to \fBsynth\fR or by some other
effect that has an associated length.
.SP
By default, the tuning used
with note notations is equal temperament; the
.B \-j
.I key
option selects just intonation, where
.I key
is a whole number of semitones relative to A (so for example, \-9
or 3 selects the key of C) or a note in scientific notation.
,SP
By default, the
.B synth
effect incorporates the functionality of \fBgain \-h\fR (see the
.B gain
effect for details);
.BR synth 's
.B \-n
option may be given to disable this behaviour.
.SP
\fIlength\fR is the length of audio to synthesize.
A value of 0 indicated to use the input length, which is also the default.
Note that, if the input is \fB\-n\fR and the \fIlength\fR is 0 or absent,
it continues generating audio until it is stopped in some other way.
.SP
\fItype\fR is one of
.RS
.TP
.B sine
A sinusoidal wave is the default type and ignores all the \fIp\fR parameters.
.TP
.B square
A square wave.
\fIp1\fR sets the percentage of each cycle that is `on' with a default of 50.
.XE
.ne 7
  |_______        | +1
  |       |       |
  |_______|_______|  0
  |       |       |
  |       |_______| -1
  |               |
  0       p1      1
.XX
.TP
.B triangle
\fIp1\fR sets the percentage of each cycle that is `rising' with a default of 50.
.XE
.ne 7
  |    .    | +1
  |   / \e   |
  |__/___\e__|  0
  | /     \e |
  |/       \e| -1
  |         |
  0    p1   1
.XX
.TP
.B sawtooth
A sawtooth wave. With a \fIphase\fR of 0 it starts at -1 and rises to 1,
and of 10 it starts at -0.9.
The offset makes no difference.
.XE
.ne 7
  |           __| +1
  |        __/  |
  |_______/_____|  0
  |  __/        |
  |_/           | -1
  |             |
  0             1
.XX
.TP
.B trapezium
The trapezoidal wave starts at -1, rises linearly to 1, stays there,
falls linearly to -1, stays there and repeats.
\fIp1\fR sets the percentage of the cycle in which the wave is rising
with a default of 10,
\fIp2\fR sets the percentage through each cycle at which falling begins
with a default of 50 and
\fIp3\fR sets the percentage through each cycle at which falling ends
with a default of 60.
.XE
.ne 7
  |    ______             |+1
  |   /      \e            |
  |__/________\e___________| 0
  | /          \e          |
  |/            \e_________|-1
  |                       |
  0   p1    p2   p3       1
.XX
.TP
.B exp
The exponential wave rises from -1 to 1 where it peaks and immediately
begins an exponential fall.
\fIp1\fR sets the position of the maximum with a default of 50.
\fIp2\fR sets the minimum amplitude in multiples of 2dB down from the maximum
with a default of 50 (100dB);
values below 50 raise the shoulders of the wave and values above 50
lower the shoulders, increasing the pointedness of the spike.
.XE
.ne 7
  |             |              | +1
  |            | |             |
  |          _|   |_           | 0
  |       __-       -__        |
  |____---             ---____ | f(p2)
  |                            |
  0             p1             1
.XX
.TP
.B whitenoise
Random noise with equal power at every frequency.
All noise generators ignore the \fIfrequency\fR and \fIphase\fR parameters
but if a DC offset is given, the signal's amplitude is automatically adjusted
to prevent clipping, so for noise in the range 0 to 1, an offset of 0.5.
\fBnoise\fR is a handy alias for \fBwhitenoise\fR
.TP
.B tpdfnoise
Noise with a Triangular Probability Densitity Function.
.TP
.B pinknoise
Random noise with the power at each frequency inversely proportional to the frequency.
.TP
.B brownnoise
Random noise with the power at each frequency inversely proportional to the frequency squared.
.TP
.B pluck
A plucked-string simulation in which an array of sample values
representing a taut string
is set in motion with a burst of noise and decayed over time.
.SP
A plucked note's \fIfrequency\fR can be from 27.5 to 4220Hz
and the sampling rate must be between 44100 and 48000Hz.
.SP
If a DC \fIoffset\fR is used, the amplitude is automatically adjusted
to prevent clipping.
.SP
\fIp1\fR affects the sustain with a default of 40 (2dB per second);
higher values give a slower decay and lower values a faster one.
.SP
\fIp2\fR and \fIp3\fR are tone controls for the initial excitation,
with a special case when \fIp3\fR is exactly 100.
If the \fIphase\fR is non-zero, it uses a different kind of random numbers.
.RE
.TP
\ 
If the \fIoffset\fR, \fIphase\fR and \fIp\fR parameters are given
before the first \fItype\fR,
they set the default values for all the following stages.
.SP
\fIcombine\fR is one of
.RS
.TP
.B create
Puts each stage's output in a new output channel and is the default:
.TP
.B mix
Mixes the generated audio 50:50 with the input signal.
.TP
.B amod
Amplitude-modulates (multiplies) the input signal by the synthesized one
considered as a value from 0 (for the most negative value)
to 1 (for the most positive value).
.TP
.B fmod
Multiplies the input signal with the synthesized one (ring modulation).
.TP
.B vdelay
Mixes the input signal with a delayed version of it
using the synthesized signal to modulate the depth of the delay.
The following three-part option specifies
the fixed and additional parts of the delay in milliseconds
and the percentage of the delayed signal in the output
from 0 for all input signal to 100 for all delayed signal
with a default of half and half.
.SP
The synthesized signal's value from \-1 to +1 varies the delay
from \fIfixed\fR seconds to \fIfixed\fR\ +\ (0\ to\ \fIextra\fR) seconds.
\fIdepth\fR controls the proportion of the delayed signal that is mixed
with the original, ranging from 0 to 1 with a default of 1.
.SP
It interpolates linearly between the input samples and can be used
to make precision phaser, flanger and chorus-like effects, vibrato
and frequency modulation (FM) synthesis (actually phase modulation,
as used in the Yamaha DX7).
.SP
.ne 2
A chorus-like effect:
.XE
   sox_ng solo.au -d synth sine vdelay -V 0.050 .25 0 75
.XX
.ne 2
A flanger:
.XE
   sox_ng solo.au -d synth triangle vdelay -V 0,0.002,.71 0.5 0 0
.XX
.RE
.TP
\ 
\fIfreq\fR and \fIfreq2\fR are the frequencies at the beginning and end
of the synthesis and the default frequency is 440Hz.
.SP
If
.I freq2
is given,
.I length
must also have been given and the generated tone is swept between
the given frequencies.  The two given frequencies must be separated by
one of the characters `:', `+', `/' and `\-', which
specify the sweep function as follows:
.RS
.IP \fB:\fR
Linear: the tone changes by a fixed number of hertz per second.
.IP \fB+\fR
Square: a second-order function is used to change the tone.
.IP \fB/\fR
Exponential: the tone changes by a fixed number of semitones per second.
.IP \fB\-\fR
Exponential: as `/', but the initial phase is always zero, and with stepped
(less smooth) frequency changes.
.RE
.TP
\ 
The frequency or frequency range is not used for the noise types.
.SP
\fIoffset\fR is the bias (DC-offset) of the signal in percent; default=0.
.SP
\fIphase\fR is the phase shift as a percentage of 1 cycle with a default of 0
(not used for noise).
.SP
For example, the following produces a 3-second 48kHz
audio file containing a sine wave swept from 300 to 3300Hz:
.XE
   sox_ng \-n output.wav synth 3 sine 300\-3300
.XX
Multiple channels can be synthesized by specifying the set of
parameters shown between curly braces multiple times;
the following puts the swept tone in the left channel and brown
noise in the right:
.XE
   sox_ng \-n output.wav synth 3 sine 300\-3300 brownnoise
.XX
The following example shows how two synth effects can be cascaded
to create a more complex waveform:
.XE
.ne 2
   play_ng \-n synth 0.5 sine 200\-500 synth 0.5 sine fmod 700\-100
.XX
The following could be used to help tune a guiter:
.XE
.ne 2
   for n in E2 A2 D3 G3 B3 E4; do
	play_ng \-n synth 4 pluck $n repeat 2; done
.XX
.TP
\fBtempo \fR[\fB\-q\fR] [\fB\-m\fR\^|\^\fB\-s\fR\^|\^\fB\-l\fR] \fIfactor\fR [\fIsegment\fR [\fIsearch\fR [\fIoverlap\fR]]]
Change the audio playback speed but not its pitch. This effect uses the
WSOLA (Waveform Similarity OverLap and Add) algorithm.
The audio is chopped up into segments which are then
shifted in the time domain and overlapped (cross-faded) at points where
their waveforms are most similar as determined by the measurement of `least
squares'.
.SP
By default, linear searches are used to find the best overlapping
points. If the optional
.B \-q
parameter is given, tree searches are used instead. This makes the effect
work more quickly, but the result may not sound as good. However, if you
must improve the processing speed, this generally reduces the sound quality
less than reducing the \fIsearch\fR or \fIoverlap\fR values.
.SP
The
.B \-m
option is used to optimize the default values of \fIsegment\fR, \fIsearch\fR and
\fIoverlap\fR for music processing.
.SP
The
.B \-s
option is used to optimize default values of \fIsegment\fR, \fIsearch\fR and
\fIoverlap\fR for speech processing.
.SP
The
.B \-l
option is used to optimize default values of \fIsegment\fR, \fIsearch\fR and
\fIoverlap\fR for `linear' processing that tends to cause more
noticeable distortion but may be useful when \fIfactor\fR is close to 1.
.SP
If \fB\-m\fR, \fB\-s\fR or \fB\-l\fR is specified,
the default value of \fIsegment\fR is based on \fIfactor\fR,
while default \fIsearch\fR and \fIoverlap\fR values are based on \fIsegment\fR.
Any values you provide override these default values.
.SP
.I factor
gives the ratio of new tempo to the old tempo, so 1.1 speeds the
tempo up by 10% and 0.9 slows it down by 10%.
.SP
The optional
.I segment
parameter selects the algorithm's segment size in milliseconds.  If no other
flags are specified, the default value is 82, which is suited to
small changes in the tempo of music. For larger changes (e.g. a factor
of 2), 41 may give a better result.
The \fB\-m\fR, \fB\-s\fR, and \fB\-l\fR flags cause \fIsegment\fR's
default value to be adjusted automatically based on \fIfactor\fR.
.SP
The optional
.I search
parameter gives the audio length in milliseconds over which
the algorithm searches for overlapping points.  If no other
flags are specified, the default value is 14.68.  Larger values use
more processing time and may or may not produce better results.
A practical maximum is half the value of \fIsegment\fR. Search
can be reduced to cut processing time at the risk of degrading output
quality. The \fB\-m\fR, \fB\-s\fR and \fB\-l\fR flags cause
the search default to be adjusted automatically based on \fIsegment\fR.
.SP
The optional
.I overlap
parameter gives the segment overlap length in milliseconds.
Its default value is 12 but the \fB\-m\fR, \fB\-s\fR and \fB\-l\fR flags
automatically adjust it based on the segment size.
Increasing \fIoverlap\fR increases processing time but may increase quality.
A practical maximum for \fIoverlap\fR is a little less then \fIsearch\fR.
.SP
See \fBspeed\fR for an effect that changes tempo and pitch together,
\fBpitch\fR and \fBbend\fR for effects that change pitch only and
\fBstretch\fR for an effect that changes the tempo using a different algorithm.
.TP
\fBtreble \fIgain\fR [\fIfrequency\fR [\fIwidth\fR[\fBs\fR\^|\^\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]]]
Apply a treble tone control effect.
See the description of the \fBbass\fR effect for details.
.TP
\fBtremolo \fIspeed\fR [\fIdepth\fR]
Apply a tremolo (low frequency sinusoidal amplitude modulation)
effect to the audio.
The frequency of the tremolo in Hz is given by \fIspeed\fR
and its \fIdepth\fR is a percentage with a default of 40.
.TP
\fBtrim\fR {\fIposition(+)\fR}
Cuts out portions of the audio.  Any number of \fIposition\fRs may be
given; audio is not sent to the output until the first \fIposition\fR
is reached.  The effect then alternates between copying and discarding
audio at each \fIposition\fR.  Using a value of 0 for the first \fIposition\fR
parameter allows copying from the beginning of the audio.
.SP
For example,
.XE
   sox_ng in.au out.au trim 0 10
.XX
copies the first ten seconds, while
.XE
   play_ng in.au trim 12:34 =15:00 -2:00
.XX
and
.XE
   play_ng in.au trim 12:34 2:26 -2:00
.XX
both play from 12 minutes 34 seconds into the audio up to 15 minutes in
(i.e. 2 minutes and 26 seconds long) then resume playing two
minutes before the end.
.TP
\fBupsample\fR [\fIfactor\fR]
Upsample the signal by an integer factor: \fIfactor\fR\-1 zero-value
samples are inserted between each pair of input samples.  As a result,
the original spectrum is replicated into the new frequency space and
attenuated.  This attenuation can be compensated for by adding
\fBvol\ \fIfactor\fR.
The \fBupsample\fR effect is typically used in combination with filtering effects.
.SP
For a general resampling effect with antialiasing, see \fBrate\fR.
See \fBdownsample\fR.
.TP
\fBvad \fR[\fIoptions\fR]
The Voice Activity Detector attempts to trim silence and quiet
background sounds from the ends of (fairly high resolution
i.e. 16-bit, 44\-48kHz) recordings of speech.  The algorithm currently
uses a simple cepstral power measurement to detect voice, so may be
fooled by other things, especially music.  The effect can trim only
from the front of the audio, so in order to trim from the back, the
.B reverse
effect must also be used.  E.g.
.XE
   play_ng speech.wav norm vad
.XX
to trim from the front,
.XE
   play_ng speech.wav norm reverse vad reverse
.XX
to trim from the back and
.XE
   play_ng speech.wav norm vad reverse vad reverse
.XX
to trim from both ends.  The use of the
.B norm
effect is recommended, but remember that neither
.B reverse
nor
.B norm
is suitable for use with streamed audio.
.TP
\ 
.B Options
.br
Default values are shown in parentheses, the allowed range in square brackets.
.RS
.IP "\fB\-t\ \fInum\fR (7) [0 \- 20]"
The measurement level used to trigger activity detection.  This might
need to be changed depending on the noise level, signal level and
other characteristics of the input audio.
.IP "\fB\-T \fInum\fR (0.25) [0.01 \- 1]"
The time constant (in seconds) used to help ignore short bursts of
sound.
.IP "\fB\-s \fInum\fR (1) [0.1 \- 4]"
The amount of audio (in seconds) to search for quieter/shorter bursts
of audio to include prior to the detected trigger point.
.IP "\fB\-g \fInum\fR (0.25) [0.1 \- 1]"
Allowed gap (in seconds) between quieter/shorter bursts of audio to
include prior to the detected trigger point.
.IP "\fB\-p \fInum\fR (0) [0 \- 4]"
The amount of audio (in seconds) to preserve before the trigger point
and any found quieter/shorter bursts.
.RE
.TP
\ 
.B Advanced Options
.br
These allow fine tuning of the algorithm's internal parameters.
.RS
.IP "\fB\-b \fInum\fR (0.35) [0.1 \- 10]"
The algorithm uses adaptive noise estimation/reduction in
order to detect the start of the wanted audio.
This option sets the time in seconds for the initial noise estimate.
.IP "\fB\-N \fInum\fR (0.1) [0.1 \- 10]"
Time constant used by the adaptive noise estimator when the noise
level is increasing.
.IP "\fB\-n \fInum\fR (0.01) [0.001 \- 0.1]"
Time constant used by the adaptive noise estimator when the noise
level is decreasing.
.IP "\fB\-r \fInum\fR (1.35) [0 \- 2]"
Amount of noise reduction to use in the detection algorithm.
.IP "\fB\-f \fInum\fR (20) [5 \- 50]"
Frequency of the algorithm's processing/measurements.
.IP "\fB\-m \fInum\fR (0.1) [0.01 \- 1]"
Measurement duration. By default, it is twice the measurement period;
i.e. with 50% overlap, but if you set \fB-f\fR,
you also need to change \fB\-m\fR to 2 divided by its value
to keep a 50% overlap.
.IP "\fB\-M \fInum\fR (0.4) [0-1 \- 1]"
Time constant used to smooth spectral measurements.
.IP "\fB\-h \fInum\fR (50) [10 \-\^]"
`Brick-wall' frequency of the high-pass filter applied at the
detector algorithm's input.
.IP "\fB\-l \fInum\fR (6000) [1000 \-\^]"
`Brick-wall' frequency of the low-pass filter applied at the
detector algorithm's input.
.IP "\fB\-H \fInum\fR (150) [10 \-\^]"
`Brick-wall' frequency of the high-pass lifter used in the detector algorithm.
.IP "\fB\-L \fInum\fR (2000) [1000 \-\^]"
`Brick-wall' frequency of the low-pass lifter used in the detector algorithm.
.RE
.TP
\ 
See the
.B silence
effect.
.TP
\fBvol \fIgain\fR [\fItype\fR [\fIlimitergain\fR]]
Apply amplification or attenuation to the audio signal.
Unlike
.BR \-v ,
which is used for balancing multiple input files as they enter the
SoX effects processing chain,
.B vol
is an effect like any other so can be applied anywhere in the processing chain
and several times if necessary.
.SP
The amount to change the volume is given by
.I gain
which is interpreted, according to the given \fItype\fR, as follows: if
.I type
is \fBamplitude\fR (or is omitted),
.I gain
is an amplitude ratio (voltage or linear),
if \fBpower\fR, a power ratio (wattage or voltage squared)
and if \fBdB\fR, a power change in dB.
.SP
When
.I type
is \fBamplitude\fR or \fBpower\fR, a
.I gain
of 1 leaves the volume unchanged,
less than 1 decreases it,
and greater than 1 increases it;
a negative
.I gain
inverts the audio signal in addition to adjusting its volume.
.SP
When
.I type
is \fBdB\fR, a
.I gain
of 0 leaves the volume unchanged,
less than 0 decreases it
and greater than 0 increases it.
.SP
See [4]
for a detailed discussion on electrical (and hence audio signal)
voltage and power ratios.
.SP
Beware of
.B Clipping
when the increasing the volume.
.SP
The
.I gain
and the
.I type
parameters can be concatenated if desired, e.g.
.BR "vol 10dB" .
.SP
An optional \fIlimitergain\fR value can be specified and should be a
value much less
than 1 (e.g. 0\*d05 or 0\*d02) and is used only on peaks to prevent clipping.
Not specifying this parameter causes no limiter to be used.  In verbose
mode, this effect displays the percentage of the audio that needed to be
limited.
.SP
See
.B gain
for a volume-changing effect with different capabilities and
.B compand
for a dynamic range compression/expansion/limiting effect.
.SH ENVIRONMENT
SoX reacts to the following environment variables.
To set them on Unix with most shells, use, for example:
.XE
   AUDIODRIVER=oss
   export AUDIODRIVER
   play_ng ...
.XX
with Unix csh:
.XE
   setenv AUDIODRIVER oss
.XX
or, on Microsoft Windows:
.XE
   set AUDIODRIVER=waveaudio
.XX
MS-Windows GUI: via Control Panel : System : Advanced : Environment
Variables
.SP
Mac OS X GUI: Refer to Apple's Technical Q&A QA1067 document.
.TP
\fBAUDIODRIVER\fR
On some systems, SoX may have more than one type of audio driver,
e.g. ALSA and OSS or SUNAU and AO and
they can have more than one audio device (a.k.a. `sound card').
If more than one audio driver has been
built into SoX and the default selected by SoX when recording or playing
is not the one that is wanted, the
.B AUDIODRIVER
environment variable can be used to override the default.
For example, on Unix systems:
.XE
   AUDIODRIVER=oss
   export AUDIODRIVER
   play_ng ...
.XX
If it is unset, SoX tries to use, in order,
\fBcoreaudio\fR, \fBpulseaudio\fR, \fBalsa\fR, \fBwaveaudio\fR,
\fBsndio\fR, \fBoss\fR, \fBsunau\fR and \fBao\fR.
For further details on these, see their entries in
.BR soxformat_ng (7).
.TP
\fBAUDIODEV\fR
Override the default audio device,
e.g.
.XE
   AUDIODEV=/dev/dsp2
   export AUDIODEV
   play_ng ...
   sox_ng ... \-t oss
.XX
or
.XE
   AUDIODEV=hw:soundwave,1,2
   export AUDIODEV
   play_ng ...
   sox_ng ... \-t alsa
.XX
If AUDIODEV is unset and the audio driver is \fBoss\fR,
SoX also responds to the standard environment variable
\fBOSS_AUDIODEV\fR.
.TP
\fBLADSPA_PATH\fR
A colon-separated list of directories in which to search for LADSPA plugins.
The default depends on how SoX was built and is typically /usr/lib/ladspa or
/usr/local/lib/ladspa.
.TP
\fBLD_LIBRARY_PATH\fR
When searching for the dynamic libraries in which most effects and
format handlers may be stored, according to how your SoX was built,
look in this colon-separated list of directories before the default
location.
.TP
\fBMIXERDEV\fR
When playing a file, use the specified mixer device for the 'v' and 'V'
volume control keys.
.TP
\fBSOX_OPTS\fR
Provide alternative default values for SoX's global options.
For example:
.XE
   SOX_OPTS="\-\-buffer 20000 \-\-play\-rate\-arg \-hs \-\-temp /mnt/temp"
   export SOX_OPTS
.XX
Note that setting \fBSOX_OPTS\fR can create unwanted changes in
the behaviour of scripts or other programs that invoke SoX.
\fBSOX_OPTS\fR might best be used for things that reflect the
environment in which SoX is being run and enabling options such as
.B \-\-no\-clobber
by default might be handled better using a shell alias
since that will not affect SoX's operation in scripts or when it is
used by other programs.
.SP
One way to ensure that scripts and programs cannot be affected
by \fBSOX_OPTS\fR is to clear \fBSOX_OPTS\fR at the start of the script,
but this loses the benefit of \fBSOX_OPTS\fR carrying system-wide defaults.
.TP
\fBTEMP\fR and \fBTMP\fR
On Windows, tmpfile() is broken \*m it creates the file in the root directory
of the current drive instead of in a valid temporary directory \*m but if
\fBTEMP\fR or \fBTMP\fR are set, it creates them in the directory indicated,
otherwise in the current directory.
To force use of tmpfile(), use \fB--temp \*(dq\*(dq\fR.
.SP
Alternatively, and on Unix, use \fB--temp\fR (see \fBGlobal Options\fR above).
.SH EXIT STATUS
SoX exits 0 when there is no error, 1 if there is a problem with the
command-line parameters or 2 if an error occurs during audio processing.
.SH BUGS
Please report any bugs found in this version of SoX to the mailing list
<sox-ng@groups.io>.
.ne 5
.SH CITATION
To cite SoX in publications please use:
.XE
Lance Norskog, Chris Bagwell et al. (2015).
SoX: Sound eXchange, the Swiss Army knife of audio manipulation.
URL http://sox.sourceforge.net
.XX
.ne 8
A BibTeX entry for SoX users is
.XE
@manual{SoX2015,
  title = "SoX: Sound eXchange, the Swiss Army knife of audio manipulation",
  author = "Norskog, Lance and Bagwell, Chris and others",
  edition = "14.4.2",
  year = 2015,
  url = "http://sox.sourceforge.net",
}
.XX
.SH SEE ALSO
.BR soxi_ng (1),
.BR soxformat_ng (7),
.BR libsox_ng (3)
.BR audacity (1),
.BR gnuplot (1),
.BR octave (1).
.br
The sox_ng web site at https://codeberg.org/sox_ng/sox_ng
.br
SoX scripting examples at
https://codeberg.org/sox_ng/sox_ng/src/branch/main/scripts
.SS References
.TP
[1]
R. Bristow-Johnson,
.IR "Cookbook formulae for audio EQ biquad filter coefficients" ,
.br
https://www.w3.org/TR/audio-eq-cookbook
.TP
[2]
Wikipedia,
.IR "Q-factor" ,
.br
http://en.wikipedia.org/wiki/Q_factor
.TP
[3]
Scott Lehman,
.IR "Effects Explained" ,
.br
https://codeberg.org/sox_ng/Effects-Explained
.TP
[4]
Wikipedia,
.IR "Decibel" ,
.br
http://en.wikipedia.org/wiki/Decibel
.TP
[5]
Richard Furse,
.IR "Linux Audio Developer's Simple Plugin API" ,
.br
http://www.ladspa.org
.TP
[6]
Richard Furse,
.IR "Computer Music Toolkit" ,
.br
http://www.ladspa.org/cmt/overview.html
.TP
[7]
Steve Harris,
.IR "LADSPA plugins" ,
.br
http://plugin.org.uk
.SH LICENSE
Copyright 1998\-2013 Chris Bagwell and SoX Contributors.
.br
Copyright 1991 Lance Norskog and Sundry Contributors.
.SP
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 2.
.SP
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.SH AUTHORS
Lance Norskog, Chris Bagwell and many others listed in the AUTHORS file
that is distributed with the source code.
