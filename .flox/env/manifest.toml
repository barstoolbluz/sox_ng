version = 1

[install]
# core build tools
autoconf.pkg-path = "autoconf"
automake.pkg-path = "automake"
libtool.pkg-path = "libtool"
gnumake.pkg-path = "gnumake"
pkg-config.pkg-path = "pkg-config"
zlib.pkg-path = "zlib"

# platform-specific compilers + dependencies
gcc.pkg-path = "gcc"
gcc.systems = ["x86_64-linux", "aarch64-linux"]
clang.pkg-path = "clang"
clang.systems = ["x86_64-darwin", "aarch64-darwin"]
IOKit.pkg-path = "darwin.apple_sdk.frameworks.IOKit"
IOKit.systems = ["x86_64-darwin", "aarch64-darwin"]
CoreFoundation.pkg-path = "darwin.apple_sdk.frameworks.CoreFoundation"
CoreFoundation.priority = 2
CoreFoundation.systems = ["x86_64-darwin", "aarch64-darwin"]

# audio libs
libsndfile.pkg-path = "libsndfile"
libltdl.pkg-path = "libtool"  # provides libltdl

# audio codec libs
flac.pkg-path = "flac"
lame.pkg-path = "lame"
libmad.pkg-path = "libmad"
libvorbis.pkg-path = "libvorbis"
libvorbis.priority = 3
libogg.pkg-path = "libogg"
opusfile.pkg-path = "opusfile"
gsm.pkg-path = "gsm"
wavpack.pkg-path = "wavpack"

# metadata + utility libs
libid3tag.pkg-path = "libid3tag"
file.pkg-path = "file"  # provides libmagic
gnused.pkg-path = "gnused"  # provides GNU sed for macOS

# audio i/o libs (linux only)
alsa-lib.pkg-path = "alsa-lib"
alsa-lib.systems = ["x86_64-linux", "aarch64-linux"]
libpulseaudio.pkg-path = "libpulseaudio"
libpulseaudio.systems = ["x86_64-linux", "aarch64-linux"]

# effects libs
ladspa-sdk.pkg-path = "ladspa-sdk"
ladspa-sdk.systems = ["x86_64-linux", "aarch64-linux"]

# ffmpeg dependency
## note: the custom ffmpeg packages defined below include the unfree 'libfdk-aac' package. For this reason,
## they CANNOT be redistributed publicly. you can either :(a) clone https://github.com/barstoolbluz/ffmpeg,
## fork it, and build/publish to the Flox Catalog; or (b) comment out the barstoolbluz/ffmpeg lines below,
## along with the "ffmpeg.systems = ["aarch64-linux", "aarch64-darwin"]"  line.
"barstoolbluz/ffmpeg".pkg-path = "ffmpeg" # comment-out if using basic ffmpeg
"barstoolbluz/ffmpeg".priority = 7 # comment-out if using basic ffmpeg
"barstoolbluz/ffmpeg".systems = ["x86_64-linux"] # comment-out if using basic ffmpeg
"barstoolbluz/ffmpeg-darwin".pkg-path = "barstoolbluz/ffmpeg-darwin" # comment-out if using basic ffmpeg
"barstoolbluz/ffmpeg-darwin".priority = 7 # comment-out if using basic ffmpeg
"barstoolbluz/ffmpeg-darwin".systems = ["x86_64-darwin"] # comment-out if using basic ffmpeg
ffmpeg.pkg-path = "ffmpeg"
ffmpeg.priority = 7
ffmpeg.systems = ["aarch64-linux", "aarch64-darwin"] # comment out to use basic ffmpeg across all systems


[build.sox_ng-linux]
description = "sox_ng: Sound eXchange_ng with native DSD support and maximal codec/container support"
version = "14.6.0"
sandbox = "pure"
command = '''
set -euo pipefail
mkdir -p "$out"

echo "Checking and fixing math.h include if needed..."
if ! grep -q "math.h" src/sox_sample_test.h; then
    echo "Adding math.h include to src/sox_sample_test.h"
    sed -i '/^#include <assert.h>$/a #include <math.h>' src/sox_sample_test.h
else
    echo "math.h include already present"
fi

autoreconf -fiv

./configure \
    --prefix="$out" \
    --enable-shared \
    --enable-static \
    --enable-replace \
    --with-ffmpeg

make -j$(nproc)

make install

mkdir -p "$out/share/doc/sox_ng"
cp README.md "$out/share/doc/sox_ng/README"
cp SOX_DSD_BASICS.md "$out/share/doc/sox_ng/DSD_BASICS"

cd "$out/share/doc" && ln -sf sox_ng sox
'''


[build.sox_ng-darwin]
description = "sox_ng: Sound eXchange_ng with native DSD support and maximal codec/container support"
version = "14.6.0"
command = '''
set -euo pipefail
mkdir -p "$out"

echo "Checking and fixing math.h include if needed..."
if ! grep -q "math.h" src/sox_sample_test.h; then
    echo "Adding math.h include to src/sox_sample_test.h"
    sed -i '/^#include <assert.h>$/a #include <math.h>' src/sox_sample_test.h
else
    echo "math.h include already present"
fi

# fixes function pointer type compatibility issues on macOS
echo "Searching and fixing function pointer type compatibility issues..."
if [[ "$OSTYPE" == "darwin"* ]]; then
    # finds all C source files and fixes uint64_t parameter issues in seek functions
    find src -name "*.c" -exec grep -l "uint64_t.*offset" {} \; | while read file; do
        echo "Patching $file..."
        sed -i 's/uint64_t \([A-Z_]*\) offset/sox_uint64_t \1 offset/g' "$file"
    done
    
    # fixes lsx_rawseek function definitions and declarations
    echo "Fixing lsx_rawseek function signatures..."
    # fixes header declaration
    sed -i 's/int lsx_rawseek(sox_format_t \* ft, uint64_t offset)/int lsx_rawseek(sox_format_t * ft, sox_uint64_t offset)/g' src/sox_i.h
    # fixes function definition
    sed -i 's/int lsx_rawseek(sox_format_t \* ft, uint64_t offset)/int lsx_rawseek(sox_format_t * ft, sox_uint64_t offset)/g' src/raw.c
    
    # fixes any remaining uint64_t in function pointer contexts
    find src -name "*.c" -exec grep -l "uint64_t" {} \; | while read file; do
        echo "Final cleanup of uint64_t types in $file..."
        sed -i 's/(\(sox_format_t[^,]*\), uint64_t/(\1, sox_uint64_t/g' "$file"
    done
else
    echo "Not on macOS, skipping function pointer type fixes"
fi

autoreconf -fiv

./configure \
    --prefix="$out" \
    --enable-shared \
    --enable-static \
    --enable-replace \
    --with-ffmpeg

make -j$(nproc)

make install

mkdir -p "$out/share/doc/sox_ng"
cp README.md "$out/share/doc/sox_ng/README"
cp SOX_DSD_BASICS.md "$out/share/doc/sox_ng/DSD_BASICS"

cd "$out/share/doc" && ln -sf sox_ng sox
'''
