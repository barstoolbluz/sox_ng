version = 1

[install]
# core build tools
autoconf.pkg-path = "autoconf"
automake.pkg-path = "automake"
libtool.pkg-path = "libtool"
gnumake.pkg-path = "gnumake"
pkg-config.pkg-path = "pkg-config"
zlib.pkg-path = "zlib"

# platform-specific compilers + dependencies
gcc.pkg-path = "gcc"
gcc.systems = ["x86_64-linux", "aarch64-linux"]
clang.pkg-path = "clang"
clang.systems = ["x86_64-darwin", "aarch64-darwin"]
IOKit.pkg-path = "darwin.apple_sdk.frameworks.IOKit"
IOKit.systems = ["x86_64-darwin", "aarch64-darwin"]
CoreFoundation.pkg-path = "darwin.apple_sdk.frameworks.CoreFoundation"
CoreFoundation.priority = 2
CoreFoundation.systems = ["x86_64-darwin", "aarch64-darwin"]

# audio libs
libsndfile.pkg-path = "libsndfile"
libltdl.pkg-path = "libtool"  # provides libltdl

# audio codec libs
flac.pkg-path = "flac"
lame.pkg-path = "lame"
libmad.pkg-path = "libmad"
libvorbis.pkg-path = "libvorbis"
libvorbis.priority = 3
libogg.pkg-path = "libogg"
opusfile.pkg-path = "opusfile"
gsm.pkg-path = "gsm"
wavpack.pkg-path = "wavpack"

# metadata + utility libs
libid3tag.pkg-path = "libid3tag"
file.pkg-path = "file"  # provides libmagic
gnused.pkg-path = "gnused"  # provides GNU sed for macOS

# audio i/o libs (linux only)
alsa-lib.pkg-path = "alsa-lib"
alsa-lib.systems = ["x86_64-linux", "aarch64-linux"]
libpulseaudio.pkg-path = "libpulseaudio"
libpulseaudio.systems = ["x86_64-linux", "aarch64-linux"]

# effects libs
ladspa-sdk.pkg-path = "ladspa-sdk"
ladspa-sdk.systems = ["x86_64-linux", "aarch64-linux"]

# custom ffmpeg
"barstoolbluz/ffmpeg".pkg-path = "ffmpeg"
"barstoolbluz/ffmpeg".priority = 7
"barstoolbluz/ffmpeg".systems = ["x86_64-linux"]
"barstoolbluz/ffmpeg-darwin".pkg-path = "barstoolbluz/ffmpeg-darwin"
"barstoolbluz/ffmpeg-darwin".priority = 7
"barstoolbluz/ffmpeg-darwin".systems = ["x86_64-darwin"]


[build.soxxx-linux]
description = "soxxx: A fork of sox_ng with DSD + maximum codec/container support"
version = "14.6.0"
sandbox = "pure"
command = '''
set -euo pipefail
mkdir -p "$out"

# First, rename all sox_ng references to soxxx
echo "Renaming sox_ng to soxxx throughout the codebase..."

# Update configure.ac
sed -i 's/sox_ng/soxxx/g' configure.ac

# Update CMakeLists.txt files
sed -i 's/sox_ng/soxxx/g' CMakeLists.txt
sed -i 's/sox_ng/soxxx/g' src/CMakeLists.txt

# Update Makefile.am files
sed -i 's/sox_ng/soxxx/g' Makefile.am
sed -i 's/soxi_ng/soxixx/g' Makefile.am
sed -i 's/soxformat_ng/soxxxformat/g' Makefile.am
sed -i 's/libsox_ng/libsoxxx/g' Makefile.am
sed -i 's/play_ng/playxx/g' Makefile.am
sed -i 's/rec_ng/recxx/g' Makefile.am
sed -i 's/sox_ng/soxxx/g' src/Makefile.am
sed -i 's/libsox_ng/libsoxxx/g' src/Makefile.am

# Also update the optional-fmts.am file which is included by src/Makefile.am
if [ -f src/optional-fmts.am ]; then
    sed -i 's/sox_ng/soxxx/g' src/optional-fmts.am
    sed -i 's/libsox_ng/libsoxxx/g' src/optional-fmts.am
fi

# Update references to libsox (without _ng) in Makefile.am files
sed -i 's/libsox_i\.c/libsoxxx_i.c/g' src/Makefile.am
sed -i 's/libsox_i\.c/libsoxxx_i.c/g' src/optional-fmts.am 2>/dev/null || true

# Rename pkg-config file
if [ -f sox_ng.pc.in ]; then
    mv sox_ng.pc.in soxxx.pc.in
    sed -i 's/sox_ng/soxxx/g' soxxx.pc.in
    sed -i 's/libsox_ng/libsoxxx/g' soxxx.pc.in
fi

# Rename source files
if [ -f src/sox_ng.h ]; then
    mv src/sox_ng.h src/soxxx.h
fi
if [ -f src/sox_ng.c ]; then
    mv src/sox_ng.c src/soxxx.c
fi
if [ -f src/libsox_ng.c ]; then
    mv src/libsox_ng.c src/libsoxxx.c
fi
if [ -f src/libsox_i.c ]; then
    mv src/libsox_i.c src/libsoxxx_i.c
fi

# Update all C source and header files to use new names
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/sox_ng\.h/soxxx.h/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/libsox_ng/libsoxxx/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/"libsox\.h"/"libsoxxx.h"/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/<libsox\.h>/<libsoxxx.h>/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/libsox_i/libsoxxx_i/g'

# Rename man pages
if [ -f sox_ng.1 ]; then
    mv sox_ng.1 soxxx.1
    sed -i 's/sox_ng/soxxx/g' soxxx.1
    sed -i 's/play_ng/playxx/g' soxxx.1
    sed -i 's/rec_ng/recxx/g' soxxx.1
fi
if [ -f soxi_ng.1 ]; then
    mv soxi_ng.1 soxixx.1
    sed -i 's/sox_ng/soxxx/g' soxixx.1
    sed -i 's/soxi_ng/soxixx/g' soxixx.1
fi
if [ -f soxformat_ng.7 ]; then
    mv soxformat_ng.7 soxxxformat.7
    sed -i 's/sox_ng/soxxx/g' soxxxformat.7
    sed -i 's/soxformat_ng/soxxxformat/g' soxxxformat.7
fi
if [ -f libsox_ng.3 ]; then
    mv libsox_ng.3 libsoxxx.3
    sed -i 's/sox_ng/soxxx/g' libsoxxx.3
    sed -i 's/libsox_ng/libsoxxx/g' libsoxxx.3
fi

# Update test scripts
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/sox_ng/soxxx/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/soxi_ng/soxixx/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/play_ng/playxx/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/rec_ng/recxx/g' 2>/dev/null || true

# Update build scripts
for script in mingwbuild osxbuild release.sh; do
    if [ -f "$script" ]; then
        sed -i 's/sox_ng/soxxx/g' "$script"
        sed -i 's/soxi_ng/soxixx/g' "$script"
        sed -i 's/libsox_ng/libsoxxx/g' "$script"
        sed -i 's/play_ng/playxx/g' "$script"
        sed -i 's/rec_ng/recxx/g' "$script"
    fi
done

echo "Checking and fixing math.h include if needed..."
if ! grep -q "math.h" src/sox_sample_test.h; then
    echo "Adding math.h include to src/sox_sample_test.h"
    sed -i '/^#include <assert.h>$/a #include <math.h>' src/sox_sample_test.h
else
    echo "math.h include already present"
fi

autoreconf -fiv

./configure \
    --prefix="$out" \
    --enable-shared \
    --enable-static \
    --with-ffmpeg

make -j$(nproc)

make install

# Rename the symlinks created during install
cd "$out/bin"
if [ -L play_ng ]; then
    rm play_ng
    ln -s soxxx playxx
fi
if [ -L rec_ng ]; then
    rm rec_ng
    ln -s soxxx recxx
fi
if [ -L soxi_ng ]; then
    rm soxi_ng
    ln -s soxxx soxixx
fi
'''


[build.soxxx-darwin]
description = "soxxx: A fork of sox_ng with DSD + maximum codec/container support"
version = "14.6.0"
command = '''
set -euo pipefail
mkdir -p "$out"

# First, rename all sox_ng references to soxxx
echo "Renaming sox_ng to soxxx throughout the codebase..."

# Update configure.ac
sed -i 's/sox_ng/soxxx/g' configure.ac

# Update CMakeLists.txt files
sed -i 's/sox_ng/soxxx/g' CMakeLists.txt
sed -i 's/sox_ng/soxxx/g' src/CMakeLists.txt

# Update Makefile.am files
sed -i 's/sox_ng/soxxx/g' Makefile.am
sed -i 's/soxi_ng/soxixx/g' Makefile.am
sed -i 's/soxformat_ng/soxxxformat/g' Makefile.am
sed -i 's/libsox_ng/libsoxxx/g' Makefile.am
sed -i 's/play_ng/playxx/g' Makefile.am
sed -i 's/rec_ng/recxx/g' Makefile.am
sed -i 's/sox_ng/soxxx/g' src/Makefile.am
sed -i 's/libsox_ng/libsoxxx/g' src/Makefile.am

# Also update the optional-fmts.am file which is included by src/Makefile.am
if [ -f src/optional-fmts.am ]; then
    sed -i 's/sox_ng/soxxx/g' src/optional-fmts.am
    sed -i 's/libsox_ng/libsoxxx/g' src/optional-fmts.am
fi

# Update references to libsox (without _ng) in Makefile.am files
sed -i 's/libsox_i\.c/libsoxxx_i.c/g' src/Makefile.am
sed -i 's/libsox_i\.c/libsoxxx_i.c/g' src/optional-fmts.am 2>/dev/null || true

# Rename pkg-config file
if [ -f sox_ng.pc.in ]; then
    mv sox_ng.pc.in soxxx.pc.in
    sed -i 's/sox_ng/soxxx/g' soxxx.pc.in
    sed -i 's/libsox_ng/libsoxxx/g' soxxx.pc.in
fi

# Rename source files
if [ -f src/sox_ng.h ]; then
    mv src/sox_ng.h src/soxxx.h
fi
if [ -f src/sox_ng.c ]; then
    mv src/sox_ng.c src/soxxx.c
fi
if [ -f src/libsox_ng.c ]; then
    mv src/libsox_ng.c src/libsoxxx.c
fi
if [ -f src/libsox_i.c ]; then
    mv src/libsox_i.c src/libsoxxx_i.c
fi

# Update all C source and header files to use new names
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/sox_ng\.h/soxxx.h/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/libsox_ng/libsoxxx/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/"libsox\.h"/"libsoxxx.h"/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/<libsox\.h>/<libsoxxx.h>/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/libsox_i/libsoxxx_i/g'

# Rename man pages
if [ -f sox_ng.1 ]; then
    mv sox_ng.1 soxxx.1
    sed -i 's/sox_ng/soxxx/g' soxxx.1
    sed -i 's/play_ng/playxx/g' soxxx.1
    sed -i 's/rec_ng/recxx/g' soxxx.1
fi
if [ -f soxi_ng.1 ]; then
    mv soxi_ng.1 soxixx.1
    sed -i 's/sox_ng/soxxx/g' soxixx.1
    sed -i 's/soxi_ng/soxixx/g' soxixx.1
fi
if [ -f soxformat_ng.7 ]; then
    mv soxformat_ng.7 soxxxformat.7
    sed -i 's/sox_ng/soxxx/g' soxxxformat.7
    sed -i 's/soxformat_ng/soxxxformat/g' soxxxformat.7
fi
if [ -f libsox_ng.3 ]; then
    mv libsox_ng.3 libsoxxx.3
    sed -i 's/sox_ng/soxxx/g' libsoxxx.3
    sed -i 's/libsox_ng/libsoxxx/g' libsoxxx.3
fi

# Update test scripts
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/sox_ng/soxxx/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/soxi_ng/soxixx/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/play_ng/playxx/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/rec_ng/recxx/g' 2>/dev/null || true

# Update build scripts
for script in mingwbuild osxbuild release.sh; do
    if [ -f "$script" ]; then
        sed -i 's/sox_ng/soxxx/g' "$script"
        sed -i 's/soxi_ng/soxixx/g' "$script"
        sed -i 's/libsox_ng/libsoxxx/g' "$script"
        sed -i 's/play_ng/playxx/g' "$script"
        sed -i 's/rec_ng/recxx/g' "$script"
    fi
done

echo "Checking and fixing math.h include if needed..."
if ! grep -q "math.h" src/sox_sample_test.h; then
    echo "Adding math.h include to src/sox_sample_test.h"
    sed -i '/^#include <assert.h>$/a #include <math.h>' src/sox_sample_test.h
else
    echo "math.h include already present"
fi

# Fix function pointer type compatibility issues on macOS
echo "Searching and fixing function pointer type compatibility issues..."
if [[ "$OSTYPE" == "darwin"* ]]; then
    # Find all C source files and fix uint64_t parameter issues in seek functions
    find src -name "*.c" -exec grep -l "uint64_t.*offset" {} \; | while read file; do
        echo "Patching $file..."
        sed -i 's/uint64_t \([A-Z_]*\) offset/sox_uint64_t \1 offset/g' "$file"
    done
    
    # Fix lsx_rawseek function definitions and declarations
    echo "Fixing lsx_rawseek function signatures..."
    # Fix header declaration
    sed -i 's/int lsx_rawseek(sox_format_t \* ft, uint64_t offset)/int lsx_rawseek(sox_format_t * ft, sox_uint64_t offset)/g' src/sox_i.h
    # Fix function definition
    sed -i 's/int lsx_rawseek(sox_format_t \* ft, uint64_t offset)/int lsx_rawseek(sox_format_t * ft, sox_uint64_t offset)/g' src/raw.c
    
    # Fix any remaining uint64_t in function pointer contexts
    find src -name "*.c" -exec grep -l "uint64_t" {} \; | while read file; do
        echo "Final cleanup of uint64_t types in $file..."
        sed -i 's/(\(sox_format_t[^,]*\), uint64_t/(\1, sox_uint64_t/g' "$file"
    done
else
    echo "Not on macOS, skipping function pointer type fixes"
fi

autoreconf -fiv

./configure \
    --prefix="$out" \
    --enable-shared \
    --enable-static \
    --with-ffmpeg

make -j$(nproc)

make install

# Rename the symlinks created during install
cd "$out/bin"
if [ -L play_ng ]; then
    rm play_ng
    ln -s soxxx playxx
fi
if [ -L rec_ng ]; then
    rm rec_ng
    ln -s soxxx recxx
fi
if [ -L soxi_ng ]; then
    rm soxi_ng
    ln -s soxxx soxixx
fi
'''
