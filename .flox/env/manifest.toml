version = 1

[install]
# core build tools
autoconf.pkg-path = "autoconf"
automake.pkg-path = "automake"
libtool.pkg-path = "libtool"
gnumake.pkg-path = "gnumake"
pkg-config.pkg-path = "pkg-config"
zlib.pkg-path = "zlib"

# platform-specific compilers + dependencies
gcc.pkg-path = "gcc"
gcc.systems = ["x86_64-linux", "aarch64-linux"]
clang.pkg-path = "clang"
clang.systems = ["x86_64-darwin", "aarch64-darwin"]
IOKit.pkg-path = "darwin.apple_sdk.frameworks.IOKit"
IOKit.systems = ["x86_64-darwin", "aarch64-darwin"]
CoreFoundation.pkg-path = "darwin.apple_sdk.frameworks.CoreFoundation"
CoreFoundation.priority = 2
CoreFoundation.systems = ["x86_64-darwin", "aarch64-darwin"]

# audio libs
libsndfile.pkg-path = "libsndfile"
libltdl.pkg-path = "libtool"  # provides libltdl

# audio codec libs
flac.pkg-path = "flac"
lame.pkg-path = "lame"
libmad.pkg-path = "libmad"
libvorbis.pkg-path = "libvorbis"
libvorbis.priority = 3
libogg.pkg-path = "libogg"
opusfile.pkg-path = "opusfile"
gsm.pkg-path = "gsm"
wavpack.pkg-path = "wavpack"

# metadata + utility libs
libid3tag.pkg-path = "libid3tag"
file.pkg-path = "file"  # provides libmagic
gnused.pkg-path = "gnused"  # provides GNU sed for macOS

# audio i/o libs (linux only)
alsa-lib.pkg-path = "alsa-lib"
alsa-lib.systems = ["x86_64-linux", "aarch64-linux"]
libpulseaudio.pkg-path = "libpulseaudio"
libpulseaudio.systems = ["x86_64-linux", "aarch64-linux"]

# effects libs
ladspa-sdk.pkg-path = "ladspa-sdk"
ladspa-sdk.systems = ["x86_64-linux", "aarch64-linux"]

# custom ffmpeg
"barstoolbluz/ffmpeg".pkg-path = "ffmpeg"
"barstoolbluz/ffmpeg".priority = 7
"barstoolbluz/ffmpeg".systems = ["x86_64-linux"]
"barstoolbluz/ffmpeg-darwin".pkg-path = "barstoolbluz/ffmpeg-darwin"
"barstoolbluz/ffmpeg-darwin".priority = 7
"barstoolbluz/ffmpeg-darwin".systems = ["x86_64-darwin"]
ffmpeg.pkg-path = "ffmpeg"
ffmpeg.priority = 7
ffmpeg.systems = ["aarch64-darwin", "aarch64-linux"]


[build.soxx-sinc-linux]
description = "soxx-sinc: sox_ng with large sinc filter support (up to 1 billion taps)"
version = "14.6.0-sinc"
sandbox = "pure"
command = '''
set -euo pipefail
mkdir -p "$out"

# Apply large sinc filter patch
echo "Applying large sinc filter support patch..."

# 1. Increase FFT4G_MAX_SIZE in fft4g.h
echo "Patching fft4g.h to increase FFT4G_MAX_SIZE..."
sed -i 's/#define FFT4G_MAX_SIZE 262144/#define FFT4G_MAX_SIZE 1073741824/' src/fft4g.h

# 2. Increase ip array sizes in fft4g.c
echo "Patching fft4g.c to increase ip array sizes..."
sed -i 's/int j, j1, k, k1, l, m, m2, ip\[256\];/int j, j1, k, k1, l, m, m2, ip[16384];/' src/fft4g.c

# 3. Increase sinc filter tap limits
echo "Patching sinc.c to increase tap limits..."
sed -i 's/GETOPT_NUMERIC(optstate, '\''n'\'', num_taps\[1\], 11, 32767)/GETOPT_NUMERIC(optstate, '\''n'\'', num_taps[1], 11, 1073741823)/' src/sinc.c
sed -i 's/\*num_taps = range_limit(n, 11, 32767);/*num_taps = range_limit(n, 11, 1073741823);/' src/sinc.c

echo "Large sinc filter patch applied successfully!"

# Now apply the standard sox_ng -> sox renaming
sed -i 's/sox_ng/sox/g' configure.ac

sed -i 's/sox_ng/sox/g' CMakeLists.txt
sed -i 's/sox_ng/sox/g' src/CMakeLists.txt

sed -i 's/sox_ng/sox/g' Makefile.am
sed -i 's/soxi_ng/soxi/g' Makefile.am
sed -i 's/soxformat_ng/soxformat/g' Makefile.am
sed -i 's/libsox_ng/libsox/g' Makefile.am
sed -i 's/play_ng/play/g' Makefile.am
sed -i 's/rec_ng/rec/g' Makefile.am
sed -i 's/sox_ng/sox/g' src/Makefile.am
sed -i 's/libsox_ng/libsox/g' src/Makefile.am

if [ -f src/optional-fmts.am ]; then
    sed -i 's/sox_ng/sox/g' src/optional-fmts.am
    sed -i 's/libsox_ng/libsox/g' src/optional-fmts.am
fi

sed -i 's/libsox_i\.c/libsox_i.c/g' src/Makefile.am
sed -i 's/libsox_i\.c/libsox_i.c/g' src/optional-fmts.am 2>/dev/null || true

if [ -f sox_ng.pc.in ]; then
    mv sox_ng.pc.in sox.pc.in
    sed -i 's/sox_ng/sox/g' sox.pc.in
    sed -i 's/libsox_ng/libsox/g' sox.pc.in
fi

if [ -f src/sox_ng.h ]; then
    mv src/sox_ng.h src/sox.h
fi
if [ -f src/sox_ng.c ]; then
    mv src/sox_ng.c src/sox.c
fi
if [ -f src/libsox_ng.c ]; then
    mv src/libsox_ng.c src/libsox.c
fi

find src -name "*.c" -o -name "*.h" | xargs sed -i 's/sox_ng\.h/sox.h/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/libsox_ng/libsox/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/"libsox\.h"/"libsox.h"/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/<libsox\.h>/<libsox.h>/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/libsox_i/libsox_i/g'

if [ -f sox_ng.1 ]; then
    mv sox_ng.1 sox.1
    sed -i 's/sox_ng/sox/g' sox.1
    sed -i 's/play_ng/play/g' sox.1
    sed -i 's/rec_ng/rec/g' sox.1
fi
if [ -f soxi_ng.1 ]; then
    mv soxi_ng.1 soxi.1
    sed -i 's/sox_ng/sox/g' soxi.1
    sed -i 's/soxi_ng/soxi/g' soxi.1
fi
if [ -f soxformat_ng.7 ]; then
    mv soxformat_ng.7 soxformat.7
    sed -i 's/sox_ng/sox/g' soxformat.7
    sed -i 's/soxformat_ng/soxformat/g' soxformat.7
fi
if [ -f libsox_ng.3 ]; then
    mv libsox_ng.3 libsox.3
    sed -i 's/sox_ng/sox/g' libsox.3
    sed -i 's/libsox_ng/libsox/g' libsox.3
fi

find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/sox_ng/sox/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/soxi_ng/soxi/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/play_ng/play/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/rec_ng/rec/g' 2>/dev/null || true

for script in mingwbuild osxbuild release.sh; do
    if [ -f "$script" ]; then
        sed -i 's/sox_ng/sox/g' "$script"
        sed -i 's/soxi_ng/soxi/g' "$script"
        sed -i 's/libsox_ng/libsox/g' "$script"
        sed -i 's/play_ng/play/g' "$script"
        sed -i 's/rec_ng/rec/g' "$script"
    fi
done

if ! grep -q "math.h" src/sox_sample_test.h; then
    echo "Adding math.h include to src/sox_sample_test.h"
    sed -i '/^#include <assert.h>$/a #include <math.h>' src/sox_sample_test.h
else
    echo "math.h include already present"
fi

autoreconf -fiv

./configure \
    --prefix="$out" \
    --enable-shared \
    --enable-static \
    --with-ffmpeg

make -j$(nproc)

make install

cd "$out/bin"
if [ -L play_ng ]; then
    rm play_ng
    ln -s sox play
fi
if [ -L rec_ng ]; then
    rm rec_ng
    ln -s sox rec
fi
if [ -L soxi_ng ]; then
    rm soxi_ng
    ln -s sox soxi
fi
'''


[build.soxx-sinc-darwin]
description = "soxx-sinc: sox_ng with large sinc filter support (up to 1 billion taps)"
version = "14.6.0-sinc"
command = '''
set -euo pipefail
mkdir -p "$out"

# Apply large sinc filter patch
echo "Applying large sinc filter support patch..."

# 1. Increase FFT4G_MAX_SIZE in fft4g.h
echo "Patching fft4g.h to increase FFT4G_MAX_SIZE..."
sed -i 's/#define FFT4G_MAX_SIZE 262144/#define FFT4G_MAX_SIZE 1073741824/' src/fft4g.h

# 2. Increase ip array sizes in fft4g.c
echo "Patching fft4g.c to increase ip array sizes..."
sed -i 's/int j, j1, k, k1, l, m, m2, ip\[256\];/int j, j1, k, k1, l, m, m2, ip[16384];/' src/fft4g.c

# 3. Increase sinc filter tap limits
echo "Patching sinc.c to increase tap limits..."
sed -i 's/GETOPT_NUMERIC(optstate, '\''n'\'', num_taps\[1\], 11, 32767)/GETOPT_NUMERIC(optstate, '\''n'\'', num_taps[1], 11, 1073741823)/' src/sinc.c
sed -i 's/\*num_taps = range_limit(n, 11, 32767);/*num_taps = range_limit(n, 11, 1073741823);/' src/sinc.c

echo "Large sinc filter patch applied successfully!"

echo "Renaming sox_ng to sox throughout the codebase..."

sed -i 's/sox_ng/sox/g' configure.ac

sed -i 's/sox_ng/sox/g' CMakeLists.txt
sed -i 's/sox_ng/sox/g' src/CMakeLists.txt

sed -i 's/sox_ng/sox/g' Makefile.am
sed -i 's/soxi_ng/soxi/g' Makefile.am
sed -i 's/soxformat_ng/soxformat/g' Makefile.am
sed -i 's/libsox_ng/libsox/g' Makefile.am
sed -i 's/play_ng/play/g' Makefile.am
sed -i 's/rec_ng/rec/g' Makefile.am
sed -i 's/sox_ng/sox/g' src/Makefile.am
sed -i 's/libsox_ng/libsox/g' src/Makefile.am

if [ -f src/optional-fmts.am ]; then
    sed -i 's/sox_ng/sox/g' src/optional-fmts.am
    sed -i 's/libsox_ng/libsox/g' src/optional-fmts.am
fi

sed -i 's/libsox_i\.c/libsox_i.c/g' src/Makefile.am
sed -i 's/libsox_i\.c/libsox_i.c/g' src/optional-fmts.am 2>/dev/null || true

if [ -f sox_ng.pc.in ]; then
    mv sox_ng.pc.in sox.pc.in
    sed -i 's/sox_ng/sox/g' sox.pc.in
    sed -i 's/libsox_ng/libsox/g' sox.pc.in
fi

if [ -f src/sox_ng.h ]; then
    mv src/sox_ng.h src/sox.h
fi
if [ -f src/sox_ng.c ]; then
    mv src/sox_ng.c src/sox.c
fi
if [ -f src/libsox_ng.c ]; then
    mv src/libsox_ng.c src/libsox.c
fi

find src -name "*.c" -o -name "*.h" | xargs sed -i 's/sox_ng\.h/sox.h/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/libsox_ng/libsox/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/"libsox\.h"/"libsox.h"/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/<libsox\.h>/<libsox.h>/g'
find src -name "*.c" -o -name "*.h" | xargs sed -i 's/libsox_i/libsox_i/g'

if [ -f sox_ng.1 ]; then
    mv sox_ng.1 sox.1
    sed -i 's/sox_ng/sox/g' sox.1
    sed -i 's/play_ng/play/g' sox.1
    sed -i 's/rec_ng/rec/g' sox.1
fi
if [ -f soxi_ng.1 ]; then
    mv soxi_ng.1 soxi.1
    sed -i 's/sox_ng/sox/g' soxi.1
    sed -i 's/soxi_ng/soxi/g' soxi.1
fi
if [ -f soxformat_ng.7 ]; then
    mv soxformat_ng.7 soxformat.7
    sed -i 's/sox_ng/sox/g' soxformat.7
    sed -i 's/soxformat_ng/soxformat/g' soxformat.7
fi
if [ -f libsox_ng.3 ]; then
    mv libsox_ng.3 libsox.3
    sed -i 's/sox_ng/sox/g' libsox.3
    sed -i 's/libsox_ng/libsox/g' libsox.3
fi

find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/sox_ng/sox/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/soxi_ng/soxi/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/play_ng/play/g' 2>/dev/null || true
find test -name "*.sh" -o -name "*.test" | xargs sed -i 's/rec_ng/rec/g' 2>/dev/null || true

for script in mingwbuild osxbuild release.sh; do
    if [ -f "$script" ]; then
        sed -i 's/sox_ng/sox/g' "$script"
        sed -i 's/soxi_ng/soxi/g' "$script"
        sed -i 's/libsox_ng/libsox/g' "$script"
        sed -i 's/play_ng/play/g' "$script"
        sed -i 's/rec_ng/rec/g' "$script"
    fi
done

echo "Checking and fixing math.h include if needed..."
if ! grep -q "math.h" src/sox_sample_test.h; then
    echo "Adding math.h include to src/sox_sample_test.h"
    sed -i '/^#include <assert.h>$/a #include <math.h>' src/sox_sample_test.h
else
    echo "math.h include already present"
fi

echo "Searching and fixing function pointer type compatibility issues..."
if [[ "$OSTYPE" == "darwin"* ]]; then
    find src -name "*.c" -exec grep -l "uint64_t.*offset" {} \; | while read file; do
        echo "Patching $file..."
        sed -i 's/uint64_t \([A-Z_]*\) offset/sox_uint64_t \1 offset/g' "$file"
    done
    
    echo "Fixing lsx_rawseek function signatures..."
    sed -i 's/int lsx_rawseek(sox_format_t \* ft, uint64_t offset)/int lsx_rawseek(sox_format_t * ft, sox_uint64_t offset)/g' src/sox_i.h
    sed -i 's/int lsx_rawseek(sox_format_t \* ft, uint64_t offset)/int lsx_rawseek(sox_format_t * ft, sox_uint64_t offset)/g' src/raw.c
    
    find src -name "*.c" -exec grep -l "uint64_t" {} \; | while read file; do
        echo "Final cleanup of uint64_t types in $file..."
        sed -i 's/(\(sox_format_t[^,]*\), uint64_t/(\1, sox_uint64_t/g' "$file"
    done
else
    echo "Not on macOS, skipping function pointer type fixes"
fi

autoreconf -fiv

./configure \
    --prefix="$out" \
    --enable-shared \
    --enable-static \
    --with-ffmpeg

make -j$(nproc)

make install

cd "$out/bin"
if [ -L play_ng ]; then
    rm play_ng
    ln -s sox play
fi
if [ -L rec_ng ]; then
    rm rec_ng
    ln -s sox rec
fi
if [ -L soxi_ng ]; then
    rm soxi_ng
    ln -s sox soxi
fi
'''